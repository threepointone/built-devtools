{"version":3,"file":"CSSOverviewPanel.js","sourceRoot":"","sources":["../../../../../../front_end/panels/css_overview/CSSOverviewPanel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport cssOverviewStyles from './cssOverview.css.js';\nimport type * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {ContrastIssue} from './CSSOverviewCompletedView.js';\nimport {CSSOverviewCompletedView} from './CSSOverviewCompletedView.js';\nimport {Events, OverviewController} from './CSSOverviewController.js';\nimport type {GlobalStyleStats} from './CSSOverviewModel.js';\nimport {CSSOverviewModel} from './CSSOverviewModel.js';\nimport {CSSOverviewProcessingView} from './CSSOverviewProcessingView.js';\nimport {CSSOverviewStartView} from './CSSOverviewStartView.js';\nimport type {UnusedDeclaration} from './CSSOverviewUnusedDeclarations.js';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet CSSOverviewPanelInstance: CSSOverviewPanel;\n\nexport class CSSOverviewPanel extends UI.Panel.Panel {\n  private readonly model: CSSOverviewModel;\n  private readonly controller: OverviewController;\n  private readonly startView: CSSOverviewStartView;\n  private readonly processingView: CSSOverviewProcessingView;\n  private readonly completedView: CSSOverviewCompletedView;\n  private backgroundColors?: Map<string, Set<number>>;\n  private textColors?: Map<string, Set<number>>;\n  private fillColors?: Map<string, Set<number>>;\n  private borderColors?: Map<string, Set<number>>;\n  private fontInfo?: Map<string, Map<string, Map<string, number[]>>>;\n  private mediaQueries?: Map<string, Protocol.CSS.CSSMedia[]>;\n  private unusedDeclarations?: Map<string, UnusedDeclaration[]>;\n  private elementCount?: number;\n  private cancelled?: boolean;\n  private globalStyleStats?: GlobalStyleStats;\n  private textColorContrastIssues?: Map<string, ContrastIssue[]>;\n\n  private constructor() {\n    super('css_overview');\n\n    this.element.classList.add('css-overview-panel');\n\n    const [model] = SDK.TargetManager.TargetManager.instance().models(CSSOverviewModel);\n    this.model = (model as CSSOverviewModel);\n\n    this.controller = new OverviewController();\n    this.startView = new CSSOverviewStartView(this.controller);\n    this.processingView = new CSSOverviewProcessingView(this.controller);\n    this.completedView = new CSSOverviewCompletedView(this.controller, model.target());\n\n    this.controller.addEventListener(Events.RequestOverviewStart, _event => {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.CaptureCssOverviewClicked);\n      this.startOverview();\n    }, this);\n    this.controller.addEventListener(Events.RequestOverviewCancel, this.cancelOverview, this);\n    this.controller.addEventListener(Events.OverviewCompleted, this.overviewCompleted, this);\n    this.controller.addEventListener(Events.Reset, this.reset, this);\n    this.controller.addEventListener(Events.RequestNodeHighlight, this.requestNodeHighlight, this);\n\n    this.reset();\n  }\n\n  static instance(): CSSOverviewPanel {\n    if (!CSSOverviewPanelInstance) {\n      CSSOverviewPanelInstance = new CSSOverviewPanel();\n    }\n    return CSSOverviewPanelInstance;\n  }\n\n  private reset(): void {\n    this.backgroundColors = new Map();\n    this.textColors = new Map();\n    this.fillColors = new Map();\n    this.borderColors = new Map();\n    this.fontInfo = new Map();\n    this.mediaQueries = new Map();\n    this.unusedDeclarations = new Map();\n    this.elementCount = 0;\n    this.cancelled = false;\n    this.globalStyleStats = {\n      styleRules: 0,\n      inlineStyles: 0,\n      externalSheets: 0,\n      stats: {\n        // Simple.\n        type: 0,\n        class: 0,\n        id: 0,\n        universal: 0,\n        attribute: 0,\n\n        // Non-simple.\n        nonSimple: 0,\n      },\n    };\n    this.renderInitialView();\n  }\n\n  private requestNodeHighlight(evt: Common.EventTarget.EventTargetEvent): void {\n    this.model.highlightNode((evt.data as Protocol.DOM.BackendNodeId));\n  }\n\n  private renderInitialView(): void {\n    this.processingView.hideWidget();\n    this.completedView.hideWidget();\n\n    this.startView.show(this.contentElement);\n  }\n\n  private renderOverviewStartedView(): void {\n    this.startView.hideWidget();\n    this.completedView.hideWidget();\n\n    this.processingView.show(this.contentElement);\n  }\n\n  private renderOverviewCompletedView(): void {\n    this.startView.hideWidget();\n    this.processingView.hideWidget();\n\n    this.completedView.show(this.contentElement);\n    this.completedView.setOverviewData({\n      backgroundColors: (this.backgroundColors as Map<string, Set<number>>),\n      textColors: (this.textColors as Map<string, Set<number>>),\n      textColorContrastIssues: (this.textColorContrastIssues as Map<string, ContrastIssue[]>),\n      fillColors: (this.fillColors as Map<string, Set<number>>),\n      borderColors: (this.borderColors as Map<string, Set<number>>),\n      globalStyleStats: this.globalStyleStats as GlobalStyleStats,\n      fontInfo: (this.fontInfo as Map<string, Map<string, Map<string, number[]>>>),\n      elementCount: (this.elementCount as number),\n      mediaQueries: (this.mediaQueries as Map<string, Protocol.CSS.CSSMedia[]>),\n      unusedDeclarations: (this.unusedDeclarations as Map<string, UnusedDeclaration[]>),\n    });\n  }\n\n  private async startOverview(): Promise<void> {\n    this.renderOverviewStartedView();\n\n    const [globalStyleStats, { elementCount, backgroundColors, textColors, textColorContrastIssues, fillColors, borderColors, fontInfo, unusedDeclarations }, mediaQueries] = await Promise.all([\n      this.model.getGlobalStylesheetStats(),\n      this.model.getNodeStyleStats(),\n      this.model.getMediaQueries(),\n    ]);\n\n    if (elementCount) {\n      this.elementCount = elementCount;\n    }\n\n    if (globalStyleStats) {\n      this.globalStyleStats = globalStyleStats;\n    }\n\n    if (mediaQueries) {\n      this.mediaQueries = mediaQueries;\n    }\n\n    if (backgroundColors) {\n      this.backgroundColors = backgroundColors;\n    }\n\n    if (textColors) {\n      this.textColors = textColors;\n    }\n\n    if (textColorContrastIssues) {\n      this.textColorContrastIssues = textColorContrastIssues;\n    }\n\n    if (fillColors) {\n      this.fillColors = fillColors;\n    }\n\n    if (borderColors) {\n      this.borderColors = borderColors;\n    }\n\n    if (fontInfo) {\n      this.fontInfo = fontInfo;\n    }\n\n    if (unusedDeclarations) {\n      this.unusedDeclarations = unusedDeclarations;\n    }\n\n    this.controller.dispatchEventToListeners(Events.OverviewCompleted);\n  }\n\n  private getStyleValue(styles: Protocol.CSS.CSSComputedStyleProperty[], name: string): string|undefined {\n    const item = styles.filter(style => style.name === name);\n    if (!item.length) {\n      return;\n    }\n\n    return item[0].value;\n  }\n\n  private cancelOverview(): void {\n    this.cancelled = true;\n  }\n\n  private overviewCompleted(): void {\n    this.renderOverviewCompletedView();\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([cssOverviewStyles]);\n  }\n}\n"]}