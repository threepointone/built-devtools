{"version":3,"file":"IssueAggregator.js","sourceRoot":"","sources":["../../../../../../front_end/panels/issues/IssueAggregator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\n/**\n * An `AggregatedIssue` representes a number of `IssuesManager.Issue.Issue` objects that are displayed together.\n * Currently only grouping by issue code, is supported. The class provides helpers to support displaying\n * of all resources that are affected by the aggregated issues.\n */\nexport class AggregatedIssue extends IssuesManager.Issue.Issue {\n  private affectedCookies = new Map<string, {\n    cookie: Protocol.Audits.AffectedCookie,\n    hasRequest: boolean,\n  }>();\n  private affectedRawCookieLines = new Map<string, {rawCookieLine: string, hasRequest: boolean}>();\n  private affectedRequests = new Map<string, Protocol.Audits.AffectedRequest>();\n  private affectedLocations = new Map<string, Protocol.Audits.SourceCodeLocation>();\n  private heavyAdIssues = new Set<IssuesManager.HeavyAdIssue.HeavyAdIssue>();\n  private blockedByResponseDetails = new Map<string, Protocol.Audits.BlockedByResponseIssueDetails>();\n  private corsIssues = new Set<IssuesManager.CorsIssue.CorsIssue>();\n  private cspIssues = new Set<IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue>();\n  private issueKind = IssuesManager.Issue.IssueKind.Improvement;\n  private lowContrastIssues = new Set<IssuesManager.LowTextContrastIssue.LowTextContrastIssue>();\n  private mixedContentIssues = new Set<IssuesManager.MixedContentIssue.MixedContentIssue>();\n  private sharedArrayBufferIssues = new Set<IssuesManager.SharedArrayBufferIssue.SharedArrayBufferIssue>();\n  private trustedWebActivityIssues = new Set<IssuesManager.TrustedWebActivityIssue.TrustedWebActivityIssue>();\n  private quirksModeIssues = new Set<IssuesManager.QuirksModeIssue.QuirksModeIssue>();\n  private attributionReportingIssues = new Set<IssuesManager.AttributionReportingIssue.AttributionReportingIssue>();\n  private wasmCrossOriginModuleSharingIssues =\n      new Set<IssuesManager.WasmCrossOriginModuleSharingIssue.WasmCrossOriginModuleSharingIssue>();\n  private representative?: IssuesManager.Issue.Issue;\n  private aggregatedIssuesCount = 0;\n\n  primaryKey(): string {\n    throw new Error('This should never be called');\n  }\n\n  getBlockedByResponseDetails(): Iterable<Protocol.Audits.BlockedByResponseIssueDetails> {\n    return this.blockedByResponseDetails.values();\n  }\n\n  cookies(): Iterable<Protocol.Audits.AffectedCookie> {\n    return Array.from(this.affectedCookies.values()).map(x => x.cookie);\n  }\n\n  getRawCookieLines(): Iterable<{rawCookieLine: string, hasRequest: boolean}> {\n    return this.affectedRawCookieLines.values();\n  }\n\n  sources(): Iterable<Protocol.Audits.SourceCodeLocation> {\n    return this.affectedLocations.values();\n  }\n\n  cookiesWithRequestIndicator(): Iterable<{\n    cookie: Protocol.Audits.AffectedCookie,\n    hasRequest: boolean,\n  }> {\n    return this.affectedCookies.values();\n  }\n\n  getHeavyAdIssues(): Iterable<IssuesManager.HeavyAdIssue.HeavyAdIssue> {\n    return this.heavyAdIssues;\n  }\n\n  getMixedContentIssues(): Iterable<IssuesManager.MixedContentIssue.MixedContentIssue> {\n    return this.mixedContentIssues;\n  }\n\n  getTrustedWebActivityIssues(): Iterable<IssuesManager.TrustedWebActivityIssue.TrustedWebActivityIssue> {\n    return this.trustedWebActivityIssues;\n  }\n\n  getCorsIssues(): Set<IssuesManager.CorsIssue.CorsIssue> {\n    return this.corsIssues;\n  }\n\n  getCspIssues(): Iterable<IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue> {\n    return this.cspIssues;\n  }\n\n  getLowContrastIssues(): Iterable<IssuesManager.LowTextContrastIssue.LowTextContrastIssue> {\n    return this.lowContrastIssues;\n  }\n\n  requests(): Iterable<Protocol.Audits.AffectedRequest> {\n    return this.affectedRequests.values();\n  }\n\n  getSharedArrayBufferIssues(): Iterable<IssuesManager.SharedArrayBufferIssue.SharedArrayBufferIssue> {\n    return this.sharedArrayBufferIssues;\n  }\n\n  getQuirksModeIssues(): Iterable<IssuesManager.QuirksModeIssue.QuirksModeIssue> {\n    return this.quirksModeIssues;\n  }\n\n  getAttributionReportingIssues(): ReadonlySet<IssuesManager.AttributionReportingIssue.AttributionReportingIssue> {\n    return this.attributionReportingIssues;\n  }\n\n  getWasmCrossOriginModuleSharingIssue():\n      ReadonlySet<IssuesManager.WasmCrossOriginModuleSharingIssue.WasmCrossOriginModuleSharingIssue> {\n    return this.wasmCrossOriginModuleSharingIssues;\n  }\n\n  getDescription(): IssuesManager.MarkdownIssueDescription.MarkdownIssueDescription|null {\n    if (this.representative) {\n      return this.representative.getDescription();\n    }\n    return null;\n  }\n\n  getCategory(): IssuesManager.Issue.IssueCategory {\n    if (this.representative) {\n      return this.representative.getCategory();\n    }\n    return IssuesManager.Issue.IssueCategory.Other;\n  }\n\n  getAggregatedIssuesCount(): number {\n    return this.aggregatedIssuesCount;\n  }\n\n  /**\n   * Produces a primary key for a cookie. Use this instead of `JSON.stringify` in\n   * case new fields are added to `AffectedCookie`.\n   */\n  private keyForCookie(cookie: Protocol.Audits.AffectedCookie): string {\n    const {domain, path, name} = cookie;\n    return `${domain};${path};${name}`;\n  }\n\n  addInstance(issue: IssuesManager.Issue.Issue): void {\n    this.aggregatedIssuesCount++;\n    if (!this.representative) {\n      this.representative = issue;\n    }\n    this.issueKind = IssuesManager.Issue.unionIssueKind(this.issueKind, issue.getKind());\n    let hasRequest = false;\n    for (const request of issue.requests()) {\n      hasRequest = true;\n      if (!this.affectedRequests.has(request.requestId)) {\n        this.affectedRequests.set(request.requestId, request);\n      }\n    }\n    for (const cookie of issue.cookies()) {\n      const key = this.keyForCookie(cookie);\n      if (!this.affectedCookies.has(key)) {\n        this.affectedCookies.set(key, {cookie, hasRequest});\n      }\n    }\n    for (const rawCookieLine of issue.rawCookieLines()) {\n      if (!this.affectedRawCookieLines.has(rawCookieLine)) {\n        this.affectedRawCookieLines.set(rawCookieLine, {rawCookieLine, hasRequest});\n      }\n    }\n    for (const location of issue.sources()) {\n      const key = JSON.stringify(location);\n      if (!this.affectedLocations.has(key)) {\n        this.affectedLocations.set(key, location);\n      }\n    }\n    if (issue instanceof IssuesManager.MixedContentIssue.MixedContentIssue) {\n      this.mixedContentIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.HeavyAdIssue.HeavyAdIssue) {\n      this.heavyAdIssues.add(issue);\n    }\n    for (const details of issue.getBlockedByResponseDetails()) {\n      const key = JSON.stringify(details, ['parentFrame', 'blockedFrame', 'requestId', 'frameId', 'reason', 'request']);\n      this.blockedByResponseDetails.set(key, details);\n    }\n    if (issue instanceof IssuesManager.TrustedWebActivityIssue.TrustedWebActivityIssue) {\n      this.trustedWebActivityIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue) {\n      this.cspIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.SharedArrayBufferIssue.SharedArrayBufferIssue) {\n      this.sharedArrayBufferIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.LowTextContrastIssue.LowTextContrastIssue) {\n      this.lowContrastIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.CorsIssue.CorsIssue) {\n      this.corsIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.QuirksModeIssue.QuirksModeIssue) {\n      this.quirksModeIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.AttributionReportingIssue.AttributionReportingIssue) {\n      this.attributionReportingIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.WasmCrossOriginModuleSharingIssue.WasmCrossOriginModuleSharingIssue) {\n      this.wasmCrossOriginModuleSharingIssues.add(issue);\n    }\n  }\n\n  getKind(): IssuesManager.Issue.IssueKind {\n    return this.issueKind;\n  }\n\n  isHidden(): boolean {\n    return this.representative?.isHidden() || false;\n  }\n\n  setHidden(_value: boolean): void {\n    throw new Error('Should not call setHidden on aggregatedIssue');\n  }\n}\n\nexport class IssueAggregator extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private readonly aggregatedIssuesByCode = new Map<string, AggregatedIssue>();\n  private readonly hiddenAggregatedIssuesByCode = new Map<string, AggregatedIssue>();\n  constructor(private readonly issuesManager: IssuesManager.IssuesManager.IssuesManager) {\n    super();\n    this.issuesManager.addEventListener(IssuesManager.IssuesManager.Events.IssueAdded, this.onIssueAdded, this);\n    this.issuesManager.addEventListener(\n        IssuesManager.IssuesManager.Events.FullUpdateRequired, this.onFullUpdateRequired, this);\n    for (const issue of this.issuesManager.issues()) {\n      this.aggregateIssue(issue);\n    }\n  }\n\n  private onIssueAdded(event: Common.EventTarget.EventTargetEvent<IssuesManager.IssuesManager.IssueAddedEvent>): void {\n    this.aggregateIssue(event.data.issue);\n  }\n\n  private onFullUpdateRequired(): void {\n    this.aggregatedIssuesByCode.clear();\n    this.hiddenAggregatedIssuesByCode.clear();\n    for (const issue of this.issuesManager.issues()) {\n      this.aggregateIssue(issue);\n    }\n    this.dispatchEventToListeners(Events.FullUpdateRequired);\n  }\n\n  private aggregateIssue(issue: IssuesManager.Issue.Issue): AggregatedIssue {\n    const map = issue.isHidden() ? this.hiddenAggregatedIssuesByCode : this.aggregatedIssuesByCode;\n    const aggregatedIssue = this.aggregateIssueByStatus(map, issue);\n    this.dispatchEventToListeners(Events.AggregatedIssueUpdated, aggregatedIssue);\n    return aggregatedIssue;\n  }\n\n  private aggregateIssueByStatus(aggregatedIssuesMap: Map<string, AggregatedIssue>, issue: IssuesManager.Issue.Issue):\n      AggregatedIssue {\n    let aggregatedIssue = aggregatedIssuesMap.get(issue.code());\n    if (!aggregatedIssue) {\n      aggregatedIssue = new AggregatedIssue(issue.code());\n      aggregatedIssuesMap.set(issue.code(), aggregatedIssue);\n    }\n    aggregatedIssue.addInstance(issue);\n    return aggregatedIssue;\n  }\n\n  aggregatedIssues(): Iterable<AggregatedIssue> {\n    return [...this.aggregatedIssuesByCode.values(), ...this.hiddenAggregatedIssuesByCode.values()];\n  }\n\n  hiddenAggregatedIssues(): Iterable<AggregatedIssue> {\n    return this.hiddenAggregatedIssuesByCode.values();\n  }\n\n  aggregatedIssueCodes(): Set<string> {\n    return new Set([...this.aggregatedIssuesByCode.keys(), ...this.hiddenAggregatedIssuesByCode.keys()]);\n  }\n\n  aggregatedIssueCategories(): Set<IssuesManager.Issue.IssueCategory> {\n    const result = new Set<IssuesManager.Issue.IssueCategory>();\n    for (const issue of this.aggregatedIssuesByCode.values()) {\n      result.add(issue.getCategory());\n    }\n    return result;\n  }\n\n  numberOfAggregatedIssues(): number {\n    return this.aggregatedIssuesByCode.size;\n  }\n\n  numberOfHiddenAggregatedIssues(): number {\n    return this.hiddenAggregatedIssuesByCode.size;\n  }\n}\n\nexport const enum Events {\n  AggregatedIssueUpdated = 'AggregatedIssueUpdated',\n  FullUpdateRequired = 'FullUpdateRequired',\n}\n\nexport type EventTypes = {\n  [Events.AggregatedIssueUpdated]: AggregatedIssue,\n  [Events.FullUpdateRequired]: void,\n};\n"]}