{"version":3,"file":"AccessibilityTreeNode.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/elements/components/AccessibilityTreeNode.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,4BAA4B,CAAC;AACnD,OAAO,KAAK,QAAQ,MAAM,oCAAoC,CAAC;AAE/D,OAAO,KAAK,gBAAgB,MAAM,2CAA2C,CAAC;AAC9E,OAAO,KAAK,WAAW,MAAM,iEAAiE,CAAC;AAC/F,OAAO,KAAK,OAAO,MAAM,kCAAkC,CAAC;AAE5D,OAAO,2BAA2B,MAAM,gCAAgC,CAAC;AAEzE,MAAM,SAAS,GAAG;IAChB;;MAEE;IACF,OAAO,EAAE,SAAS;CACnB,CAAC;AACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,qDAAqD,EAAE,SAAS,CAAC,CAAC;AAC3G,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAEtE,qEAAqE;AACrE,uFAAuF;AACvF,SAAS,oBAAoB,CAAC,IAAY;IACxC,MAAM,oBAAoB,GAAG,KAAK,CAAC;IAEnC,IAAI,IAAI,CAAC,MAAM,GAAG,oBAAoB,EAAE;QACtC,OAAO,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;KACxE;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAQD,MAAM,OAAO,qBAAsB,SAAQ,WAAW;IACpD,MAAM,CAAU,UAAU,GAAG,OAAO,CAAC,OAAO,CAAA,kCAAkC,CAAC;IAC9D,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IAEpD,OAAO,GAAG,IAAI,CAAC;IACf,IAAI,GAAG,EAAE,CAAC;IACV,IAAI,GAAG,EAAE,CAAC;IAElB,IAAI,IAAI,CAAC,IAA+B;QACtC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,MAAM,CAAC,kBAAkB,GAAG,CAAC,2BAA2B,CAAC,CAAC;IACjE,CAAC;IAEO,KAAK,CAAC,MAAM;QAClB,MAAM,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACvG,mBAAmB;YACnB,OAAO,CAAC,MAAM,CACZ,OAAO,CAAC,IAAI,CAAA,GAAG,IAAI,CAAC,OAAO,CAAA,CAAC;gBAC1B,OAAO,CAAC,IAAI,CAAA,SAAS,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAA,CAAC;gBAC5D,OAAO,CAAC,IAAI,CAAA,4BAA4B,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,8CAA8C,IAAI,CAAC,IAAI,UAAU,EAAE,EAC5I,IAAI,CAAC,MAAM,EACX,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;YAChB,kBAAkB;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;;AAGH,gBAAgB,CAAC,cAAc,CAAC,eAAe,CAAC,kCAAkC,EAAE,qBAAqB,CAAC,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\n\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as Coordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport accessibilityTreeNodeStyles from './accessibilityTreeNode.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Ignored node element text content in Accessibility Tree View of the Elements panel\n  */\n  ignored: 'Ignored',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/components/AccessibilityTreeNode.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// TODO(jobay) move this to Platform.StringUtilities if still needed.\n// This function is a variant of setTextContentTruncatedIfNeeded found in DOMExtension.\nfunction truncateTextIfNeeded(text: string): string {\n  const maxTextContentLength = 10000;\n\n  if (text.length > maxTextContentLength) {\n    return Platform.StringUtilities.trimMiddle(text, maxTextContentLength);\n  }\n  return text;\n}\n\nexport interface AccessibilityTreeNodeData {\n  ignored: boolean;\n  name: string;\n  role: string;\n}\n\nexport class AccessibilityTreeNode extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-accessibility-tree-node`;\n  private readonly shadow = this.attachShadow({mode: 'open'});\n\n  private ignored = true;\n  private name = '';\n  private role = '';\n\n  set data(data: AccessibilityTreeNodeData) {\n    this.ignored = data.ignored;\n    this.name = data.name;\n    this.role = data.role;\n    this.render();\n  }\n\n  connectedCallback(): void {\n    this.shadow.adoptedStyleSheets = [accessibilityTreeNodeStyles];\n  }\n\n  private async render(): Promise<void> {\n    await Coordinator.RenderCoordinator.RenderCoordinator.instance().write('Accessibility node render', () => {\n      // clang-format off\n      LitHtml.render(\n        LitHtml.html`${this.ignored?\n          LitHtml.html`<span>${i18nString(UIStrings.ignored)}</span>`:\n          LitHtml.html`<span class='role-value'>${truncateTextIfNeeded(this.role)}</span>&nbsp\"<span class='attribute-value'>${this.name}</span>\"`}`,\n        this.shadow,\n        {host: this});\n      // clang-format on\n    });\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-accessibility-tree-node', AccessibilityTreeNode);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-accessibility-tree-node': AccessibilityTreeNode;\n  }\n}\n"]}