{"version":3,"file":"ElementsPanelLink.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/elements/components/ElementsPanelLink.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,gBAAgB,MAAM,2CAA2C,CAAC;AAC9E,OAAO,KAAK,OAAO,MAAM,kCAAkC,CAAC;AAC5D,OAAO,uBAAuB,MAAM,4BAA4B,CAAC;AAOjE,MAAM,OAAO,iBAAkB,SAAQ,WAAW;IAChD,MAAM,CAAU,UAAU,GAAG,OAAO,CAAC,OAAO,CAAA,8BAA8B,CAAC;IAC1D,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IAEpD,wBAAwB,GAA8B,GAAG,EAAE,GAAE,CAAC,CAAC;IAC/D,6BAA6B,GAA8B,GAAG,EAAE,GAAE,CAAC,CAAC;IACpE,6BAA6B,GAA8B,GAAG,EAAE,GAAE,CAAC,CAAC;IAE5E,IAAI,IAAI,CAAC,IAA2B;QAClC,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,wBAAwB,CAAC;QAC9D,IAAI,CAAC,6BAA6B,GAAG,IAAI,CAAC,6BAA6B,CAAC;QACxE,IAAI,CAAC,6BAA6B,GAAG,IAAI,CAAC,6BAA6B,CAAC;QACxE,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAEO,MAAM;QACZ,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,MAAM,CAAC,kBAAkB,GAAG,CAAC,uBAAuB,CAAC,CAAC;IAC7D,CAAC;IAEO,MAAM;QACZ,mBAAmB;QACjB,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAA;;;iBAGhB,IAAI,CAAC,wBAAwB;sBACxB,IAAI,CAAC,6BAA6B;sBAClC,IAAI,CAAC,6BAA6B;OACjD,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAClB,kBAAkB;IACpB,CAAC;;AAGH,gBAAgB,CAAC,cAAc,CAAC,eAAe,CAAC,8BAA8B,EAAE,iBAAiB,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport elementsPanelLinkStyles from './elementsPanelLink.css.js';\n\nexport interface ElementsPanelLinkData {\n  onElementRevealIconClick: (event?: Event) => void;\n  onElementRevealIconMouseEnter: (event?: Event) => void;\n  onElementRevealIconMouseLeave: (event?: Event) => void;\n}\nexport class ElementsPanelLink extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-elements-panel-link`;\n  private readonly shadow = this.attachShadow({mode: 'open'});\n\n  private onElementRevealIconClick: ((event?: Event) => void) = () => {};\n  private onElementRevealIconMouseEnter: ((event?: Event) => void) = () => {};\n  private onElementRevealIconMouseLeave: ((event?: Event) => void) = () => {};\n\n  set data(data: ElementsPanelLinkData) {\n    this.onElementRevealIconClick = data.onElementRevealIconClick;\n    this.onElementRevealIconMouseEnter = data.onElementRevealIconMouseEnter;\n    this.onElementRevealIconMouseLeave = data.onElementRevealIconMouseLeave;\n    this.update();\n  }\n\n  private update(): void {\n    this.render();\n  }\n\n  connectedCallback(): void {\n    this.shadow.adoptedStyleSheets = [elementsPanelLinkStyles];\n  }\n\n  private render(): void {\n    // clang-format off\n      LitHtml.render(LitHtml.html`\n      <span\n        class=\"element-reveal-icon\"\n        @click=${this.onElementRevealIconClick}\n        @mouseenter=${this.onElementRevealIconMouseEnter}\n        @mouseleave=${this.onElementRevealIconMouseLeave}></span>\n      `, this.shadow);\n    // clang-format on\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-elements-panel-link', ElementsPanelLink);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-elements-panel-link': ElementsPanelLink;\n  }\n}\n"]}