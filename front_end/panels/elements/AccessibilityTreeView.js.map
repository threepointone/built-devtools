{"version":3,"file":"AccessibilityTreeView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/AccessibilityTreeView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as TreeOutline from '../../ui/components/tree_outline/tree_outline.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as AccessibilityTreeUtils from './AccessibilityTreeUtils.js';\nimport {ElementsPanel} from './ElementsPanel.js';\n\nexport class AccessibilityTreeView extends UI.Widget.VBox {\n  private readonly accessibilityTreeComponent =\n      new TreeOutline.TreeOutline.TreeOutline<AccessibilityTreeUtils.AXTreeNodeData>();\n  private treeData: AccessibilityTreeUtils.AXTreeNode[] = [];\n  private readonly toggleButton: HTMLButtonElement;\n  private accessibilityModel: SDK.AccessibilityModel.AccessibilityModel|null = null;\n  private rootAXNode: SDK.AccessibilityModel.AccessibilityNode|null = null;\n  private selectedTreeNode: AccessibilityTreeUtils.AXTreeNode|null = null;\n  private inspectedDOMNode: SDK.DOMModel.DOMNode|null = null;\n\n  constructor(toggleButton: HTMLButtonElement) {\n    super();\n    // toggleButton is bound to a click handler on ElementsPanel to switch between the DOM tree\n    // and accessibility tree views.\n    this.toggleButton = toggleButton;\n    this.contentElement.appendChild(this.toggleButton);\n    this.contentElement.appendChild(this.accessibilityTreeComponent);\n\n    // The DOM tree and accessibility are kept in sync as much as possible, so\n    // on node selection, update the currently inspected node and reveal in the\n    // DOM tree.\n    this.accessibilityTreeComponent.addEventListener('itemselected', (event: Event) => {\n      const evt = event as TreeOutline.TreeOutline.ItemSelectedEvent<AccessibilityTreeUtils.AXTreeNodeData>;\n      const axNode = evt.data.node.treeNodeData;\n      if (!axNode.isDOMNode()) {\n        return;\n      }\n      const deferredNode = axNode.deferredDOMNode();\n      if (deferredNode) {\n        deferredNode.resolve(domNode => {\n          if (domNode) {\n            this.inspectedDOMNode = domNode;\n            ElementsPanel.instance().revealAndSelectNode(domNode, true, false);\n          }\n        });\n      }\n    });\n\n    this.accessibilityTreeComponent.addEventListener('itemmouseover', (event: Event) => {\n      const evt = event as TreeOutline.TreeOutline.ItemMouseOverEvent<AccessibilityTreeUtils.AXTreeNodeData>;\n      evt.data.node.treeNodeData.highlightDOMNode();\n    });\n\n    this.accessibilityTreeComponent.addEventListener('itemmouseout', () => {\n      SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    });\n  }\n\n  wasShown(): void {\n    if (this.inspectedDOMNode) {\n      this.loadSubTreeIntoAccessibilityModel(this.inspectedDOMNode);\n    } else {\n      this.accessibilityTreeComponent.expandRecursively(1);\n    }\n  }\n\n  setAccessibilityModel(model: SDK.AccessibilityModel.AccessibilityModel|null): void {\n    this.accessibilityModel = model;\n  }\n\n  wireToDOMModel(domModel: SDK.DOMModel.DOMModel): void {\n    if (!domModel.parentModel()) {\n      this.setAccessibilityModel(domModel.target().model(SDK.AccessibilityModel.AccessibilityModel));\n    }\n    domModel.addEventListener(SDK.DOMModel.Events.NodeInserted, this.domUpdated, this);\n    domModel.addEventListener(SDK.DOMModel.Events.NodeRemoved, this.domUpdatedNode, this);\n    domModel.addEventListener(SDK.DOMModel.Events.AttrModified, this.domUpdatedNode, this);\n    domModel.addEventListener(SDK.DOMModel.Events.AttrRemoved, this.domUpdatedNode, this);\n    domModel.addEventListener(SDK.DOMModel.Events.CharacterDataModified, this.domUpdated, this);\n    domModel.addEventListener(SDK.DOMModel.Events.ChildNodeCountUpdated, this.domUpdated, this);\n    domModel.addEventListener(SDK.DOMModel.Events.DistributedNodesChanged, this.domUpdated, this);\n    domModel.addEventListener(SDK.DOMModel.Events.DocumentUpdated, this.documentUpdated, this);\n  }\n\n  unwireFromDOMModel(domModel: SDK.DOMModel.DOMModel): void {\n    domModel.removeEventListener(SDK.DOMModel.Events.NodeInserted, this.domUpdated, this);\n    domModel.removeEventListener(SDK.DOMModel.Events.NodeRemoved, this.domUpdatedNode, this);\n    domModel.removeEventListener(SDK.DOMModel.Events.AttrModified, this.domUpdatedNode, this);\n    domModel.removeEventListener(SDK.DOMModel.Events.AttrRemoved, this.domUpdatedNode, this);\n    domModel.removeEventListener(SDK.DOMModel.Events.CharacterDataModified, this.domUpdated, this);\n    domModel.removeEventListener(SDK.DOMModel.Events.ChildNodeCountUpdated, this.domUpdated, this);\n    domModel.removeEventListener(SDK.DOMModel.Events.DistributedNodesChanged, this.domUpdated, this);\n    domModel.removeEventListener(SDK.DOMModel.Events.DocumentUpdated, this.documentUpdated, this);\n  }\n\n  domUpdatedNode(event: Common.EventTarget.EventTargetEvent<{node: SDK.DOMModel.DOMNode}>): void {\n    this.update(event.data.node);\n  }\n\n  domUpdated(event: Common.EventTarget.EventTargetEvent<SDK.DOMModel.DOMNode>): void {\n    this.update(event.data);\n  }\n\n  async update(node: SDK.DOMModel.DOMNode): Promise<void> {\n    const axModel = node.domModel().target().model(SDK.AccessibilityModel.AccessibilityModel);\n    await axModel?.updateSubtreeAndAncestors(node.backendNodeId());\n    this.renderTree();\n  }\n\n  documentUpdated(event: Common.EventTarget.EventTargetEvent<SDK.DOMModel.DOMModel>): void {\n    const domModel = event.data;\n    const axModel = domModel.target().model(SDK.AccessibilityModel.AccessibilityModel);\n    if (domModel.existingDocument() && !domModel.parentModel() && axModel) {\n      this.refreshAccessibilityTree(axModel);\n    }\n  }\n\n  renderTree(): void {\n    if (!this.rootAXNode) {\n      this.treeData = [];\n    } else {\n      this.treeData = [AccessibilityTreeUtils.sdkNodeToAXTreeNode(this.rootAXNode)];\n    }\n\n    this.accessibilityTreeComponent.data = {\n      defaultRenderer: AccessibilityTreeUtils.accessibilityNodeRenderer,\n      tree: this.treeData,\n    };\n\n    const axModel = this.inspectedDOMNode?.domModel().target().model(SDK.AccessibilityModel.AccessibilityModel);\n    const inspectedAXNode = axModel?.axNodeForDOMNode(this.inspectedDOMNode);\n    if (inspectedAXNode) {\n      this.selectedTreeNode = AccessibilityTreeUtils.sdkNodeToAXTreeNode(inspectedAXNode);\n      this.accessibilityTreeComponent.expandToAndSelectTreeNode(this.selectedTreeNode);\n    } else {\n      this.accessibilityTreeComponent.expandRecursively(1);\n    }\n  }\n\n  async refreshAccessibilityTree(accessibilityModel: SDK.AccessibilityModel.AccessibilityModel): Promise<void> {\n    // We always expand the root node so we might as well fetch one level of children immediately.\n    const root = await accessibilityModel.requestRootNode(1);\n    if (!root) {\n      return;\n    }\n\n    this.rootAXNode = root;\n    this.inspectedDOMNode = null;\n    this.renderTree();\n  }\n\n  // Given a selected DOM node, asks the model to load the missing subtree from the root to the\n  // selected node and then re-renders the tree.\n  async loadSubTreeIntoAccessibilityModel(selectedNode: SDK.DOMModel.DOMNode): Promise<void> {\n    if (!this.accessibilityModel) {\n      return;\n    }\n\n    // If this node has been loaded previously, the accessibility tree will return it's cached node.\n    // Eventually we'll need some mechanism for forcing it to fetch a new node when we are subscribing\n    // for updates, but TBD later.\n    // EG for a backend tree like:\n    //\n    // A*\n    //   B\n    //     C\n    //   D\n    //     E\n    // Where only A is already loaded into the model, calling requestAndLoadSubTreeToNode(C) will\n    // load [A, B, D, C] into the model, and return C.\n    const inspectedAXNode = await this.accessibilityModel.requestAndLoadSubTreeToNode(selectedNode);\n    if (!inspectedAXNode) {\n      return;\n    }\n\n    this.accessibilityTreeComponent.data = {\n      defaultRenderer: AccessibilityTreeUtils.accessibilityNodeRenderer,\n      tree: this.treeData,\n    };\n\n    // These nodes require a special case, as they don't have an unignored node in the\n    // accessibility tree. Someone inspecting these in the DOM is probably expecting to\n    // be focused on the root WebArea of the accessibility tree.\n    // TODO(meredithl): Fix for when the inspected node is ingored in the accessibility\n    // tree. Eg, inspecting <head> in the DOM tree.\n    if (selectedNode.nodeName() === 'BODY' || selectedNode.nodeName() === 'HTML') {\n      this.accessibilityTreeComponent.expandToAndSelectTreeNode(this.treeData[0]);\n      this.selectedTreeNode = this.treeData[0];\n      return;\n    }\n\n    this.selectedTreeNode = AccessibilityTreeUtils.sdkNodeToAXTreeNode(inspectedAXNode);\n    this.accessibilityTreeComponent.expandToAndSelectTreeNode(this.selectedTreeNode);\n  }\n\n  // Selected node in the DOM has changed, and the corresponding accessibility node may be\n  // unloaded.\n  async selectedNodeChanged(inspectedNode: SDK.DOMModel.DOMNode): Promise<void> {\n    if (inspectedNode === this.inspectedDOMNode) {\n      return;\n    }\n    this.inspectedDOMNode = inspectedNode;\n    // We only want to load nodes into the model when the AccessibilityTree is visible.\n    if (this.isShowing()) {\n      await this.loadSubTreeIntoAccessibilityModel(inspectedNode);\n    }\n  }\n}\n"]}