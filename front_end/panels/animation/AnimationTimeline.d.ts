import * as SDK from '../../core/sdk/sdk.js';
import * as UI from '../../ui/legacy/legacy.js';
import type { AnimationEffect } from './AnimationModel.js';
import { AnimationModel } from './AnimationModel.js';
export declare class AnimationTimeline extends UI.Widget.VBox implements SDK.TargetManager.SDKModelObserver<AnimationModel> {
    private gridWrapper;
    private grid;
    private playbackRate;
    private allPaused;
    private animationsContainer;
    private playbackRateButtons;
    private previewContainer;
    private timelineScrubber;
    private currentTime;
    private popoverHelper;
    private clearButton;
    private selectedGroup;
    private renderQueue;
    private defaultDuration;
    private durationInternal;
    private timelineControlsWidth;
    private readonly nodesMap;
    private uiAnimations;
    private groupBuffer;
    private readonly previewMap;
    private readonly symbol;
    private readonly animationsMap;
    private timelineScrubberLine?;
    private pauseButton?;
    private controlButton?;
    private controlState?;
    private redrawing?;
    private cachedTimelineWidth?;
    private cachedTimelineHeight?;
    private scrubberPlayer?;
    private gridOffsetLeft?;
    private originalScrubberTime?;
    private originalMousePosition?;
    private constructor();
    static instance(): AnimationTimeline;
    wasShown(): void;
    willHide(): void;
    modelAdded(animationModel: AnimationModel): void;
    modelRemoved(animationModel: AnimationModel): void;
    private addEventListeners;
    private removeEventListeners;
    private nodeChanged;
    private createScrubber;
    private createHeader;
    private handlePlaybackRateControlKeyDown;
    private focusNextPlaybackRateButton;
    private getPopoverRequest;
    private togglePauseAll;
    private setPlaybackRate;
    private updatePlaybackControls;
    private controlButtonToggle;
    private updateControlButton;
    private effectivePlaybackRate;
    private togglePause;
    private replay;
    duration(): number;
    setDuration(duration: number): void;
    private clearTimeline;
    private reset;
    private animationGroupStarted;
    private addAnimationGroup;
    private handleAnimationGroupKeyDown;
    private focusNextGroup;
    private removeAnimationGroup;
    private selectAnimationGroup;
    private addAnimation;
    private nodeRemoved;
    private renderGrid;
    scheduleRedraw(): void;
    private render;
    onResize(): void;
    width(): number;
    private resizeWindow;
    private syncScrubber;
    private animateTime;
    pixelMsRatio(): number;
    private updateScrubber;
    private repositionScrubber;
    private scrubberDragStart;
    private scrubberDragMove;
    private scrubberDragEnd;
}
export declare const GlobalPlaybackRates: number[];
export declare class NodeUI {
    element: HTMLDivElement;
    private readonly description;
    private readonly timelineElement;
    private node?;
    constructor(_animationEffect: AnimationEffect);
    nodeResolved(node: SDK.DOMModel.DOMNode | null): void;
    createNewRow(): Element;
    nodeRemoved(): void;
    nodeChanged(): void;
}
export declare class StepTimingFunction {
    steps: number;
    stepAtPosition: string;
    constructor(steps: number, stepAtPosition: string);
    static parse(text: string): StepTimingFunction | null;
}
