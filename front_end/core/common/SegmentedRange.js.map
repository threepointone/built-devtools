{"version":3,"file":"SegmentedRange.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/SegmentedRange.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\n\nexport class Segment<T> {\n  begin: number;\n  end: number;\n  data: T;\n\n  constructor(begin: number, end: number, data: T) {\n    if (begin > end) {\n      throw new Error('Invalid segment');\n    }\n    this.begin = begin;\n    this.end = end;\n    this.data = data;\n  }\n\n  intersects(that: Segment<T>): boolean {\n    return this.begin < that.end && that.begin < this.end;\n  }\n}\n\nexport class SegmentedRange<T> {\n  private segmentsInternal: Segment<T>[];\n  private readonly mergeCallback: ((arg0: Segment<T>, arg1: Segment<T>) => Segment<T>| null)|undefined;\n\n  constructor(mergeCallback?: ((arg0: Segment<T>, arg1: Segment<T>) => Segment<T>| null)) {\n    this.segmentsInternal = [];\n    this.mergeCallback = mergeCallback;\n  }\n\n  append(newSegment: Segment<T>): void {\n    // 1. Find the proper insertion point for new segment\n    let startIndex = Platform.ArrayUtilities.lowerBound(this.segmentsInternal, newSegment, (a, b) => a.begin - b.begin);\n    let endIndex = startIndex;\n    let merged: (Segment<T>|null)|null = null;\n    if (startIndex > 0) {\n      // 2. Try mering the preceding segment\n      const precedingSegment = this.segmentsInternal[startIndex - 1];\n      merged = this.tryMerge(precedingSegment, newSegment);\n      if (merged) {\n        --startIndex;\n        newSegment = merged;\n      } else if (this.segmentsInternal[startIndex - 1].end >= newSegment.begin) {\n        // 2a. If merge failed and segments overlap, adjust preceding segment.\n        // If an old segment entirely contains new one, split it in two.\n        if (newSegment.end < precedingSegment.end) {\n          this.segmentsInternal.splice(\n              startIndex, 0, new Segment<T>(newSegment.end, precedingSegment.end, precedingSegment.data));\n        }\n        precedingSegment.end = newSegment.begin;\n      }\n    }\n    // 3. Consume all segments that are entirely covered by the new one.\n    while (endIndex < this.segmentsInternal.length && this.segmentsInternal[endIndex].end <= newSegment.end) {\n      ++endIndex;\n    }\n    // 4. Merge or adjust the succeeding segment if it overlaps.\n    if (endIndex < this.segmentsInternal.length) {\n      merged = this.tryMerge(newSegment, this.segmentsInternal[endIndex]);\n      if (merged) {\n        endIndex++;\n        newSegment = merged;\n      } else if (newSegment.intersects(this.segmentsInternal[endIndex])) {\n        this.segmentsInternal[endIndex].begin = newSegment.end;\n      }\n    }\n    this.segmentsInternal.splice(startIndex, endIndex - startIndex, newSegment);\n  }\n\n  appendRange(that: SegmentedRange<T>): void {\n    that.segments().forEach(segment => this.append(segment));\n  }\n\n  segments(): Segment<T>[] {\n    return this.segmentsInternal;\n  }\n\n  private tryMerge(first: Segment<T>, second: Segment<T>): Segment<T>|null {\n    const merged = this.mergeCallback && this.mergeCallback(first, second);\n    if (!merged) {\n      return null;\n    }\n    merged.begin = first.begin;\n    merged.end = Math.max(first.end, second.end);\n    return merged;\n  }\n}\n"]}