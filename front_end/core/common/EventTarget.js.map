{"version":3,"file":"EventTarget.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/EventTarget.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAc7B,MAAM,UAAU,oBAAoB,CAAC,SAA4B;IAC/D,KAAK,MAAM,SAAS,IAAI,SAAS,EAAE;QACjC,SAAS,CAAC,WAAW,CAAC,mBAAmB,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;KAC1G;IACD,sDAAsD;IACtD,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC;AA0BD,MAAM,UAAU,SAAS,CAAC,IAAY,EAAE,SAAkB,EAAE,EAAE,SAA6B,MAAM;IAC/F,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IAC7E,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AAC5B,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../platform/platform.js';\n\n// TODO(crbug.com/1228674) Remove defaults for generic type parameters once\n//                         all event emitters and sinks have been migrated.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface EventDescriptor<Events = any, T extends EventType<Events> = any> {\n  eventTarget: EventTarget<Events>;\n  eventType: T;\n  thisObject?: Object;\n  listener: (arg0: EventTargetEvent<EventPayload<Events, T>>) => void;\n}\n\nexport function removeEventListeners(eventList: EventDescriptor[]): void {\n  for (const eventInfo of eventList) {\n    eventInfo.eventTarget.removeEventListener(eventInfo.eventType, eventInfo.listener, eventInfo.thisObject);\n  }\n  // Do not hold references on unused event descriptors.\n  eventList.splice(0);\n}\n\n// TODO(crbug.com/1228674): Once all event emitters and sinks have been migrated\n// we can use:\n//    export type EventType<Events> = keyof Events;\n//    export type EventPayload<Events, T> = Events[T];\nexport type EventType<Events> = Events extends Object ? keyof Events : Events extends void ? never : string|symbol;\nexport type EventPayload<Events, T> = T extends keyof Events ? Events[T] : unknown;\nexport type EventPayloadToRestParameters<T> = T extends void ? [] : [T];\n\n// TODO(crbug.com/1228674) Remove defaults for generic type parameters once\n//                         all event emitters and sinks have been migrated.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface EventTarget<Events = any> {\n  addEventListener<T extends EventType<Events>>(\n      eventType: T, listener: (arg0: EventTargetEvent<EventPayload<Events, T>>) => void,\n      thisObject?: Object): EventDescriptor<Events, T>;\n  once<T extends EventType<Events>>(eventType: T): Promise<EventPayload<Events, T>>;\n  removeEventListener<T extends EventType<Events>>(\n      eventType: T, listener: (arg0: EventTargetEvent<EventPayload<Events, T>>) => void, thisObject?: Object): void;\n  hasEventListeners(eventType: EventType<Events>): boolean;\n  dispatchEventToListeners<T extends EventType<Events>>(\n      eventType: Platform.TypeScriptUtilities.NoUnion<T>,\n      ...[eventData]: EventPayloadToRestParameters<EventPayload<Events, T>>): void;\n}\n\nexport function fireEvent(name: string, detail: unknown = {}, target: HTMLElement|Window = window): void {\n  const evt = new CustomEvent(name, {bubbles: true, cancelable: true, detail});\n  target.dispatchEvent(evt);\n}\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface EventTargetEvent<T = any> {\n  data: T;\n}\n"]}