{"version":3,"file":"OverlayPersistentHighlighter.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/OverlayPersistentHighlighter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Common from '../common/common.js';\n\nimport {OverlayColorGenerator} from './OverlayColorGenerator.js';\n\nexport class OverlayPersistentHighlighter {\n  private readonly model: OverlayModel;\n  private readonly gridHighlights: Map<Protocol.DOM.NodeId, Protocol.Overlay.GridHighlightConfig>;\n  private readonly scrollSnapHighlights: Map<Protocol.DOM.NodeId, Protocol.Overlay.ScrollSnapContainerHighlightConfig>;\n  private readonly flexHighlights: Map<Protocol.DOM.NodeId, Protocol.Overlay.FlexContainerHighlightConfig>;\n  private readonly containerQueryHighlights:\n      Map<Protocol.DOM.NodeId, Protocol.Overlay.ContainerQueryContainerHighlightConfig>;\n  private readonly colors: Map<Protocol.DOM.NodeId, Common.Color.Color>;\n  private gridColorGenerator: OverlayColorGenerator;\n  private flexColorGenerator: OverlayColorGenerator;\n  private flexEnabled: boolean;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly showGridLineLabelsSetting: Common.Settings.Setting<any>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly extendGridLinesSetting: Common.Settings.Setting<any>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly showGridAreasSetting: Common.Settings.Setting<any>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly showGridTrackSizesSetting: Common.Settings.Setting<any>;\n  constructor(model: OverlayModel, flexEnabled: boolean = true) {\n    this.model = model;\n\n    this.gridHighlights = new Map();\n\n    this.scrollSnapHighlights = new Map();\n\n    this.flexHighlights = new Map();\n\n    this.containerQueryHighlights = new Map();\n\n    this.colors = new Map();\n\n    this.gridColorGenerator = new OverlayColorGenerator();\n    this.flexColorGenerator = new OverlayColorGenerator();\n    this.flexEnabled = flexEnabled;\n\n    this.showGridLineLabelsSetting = Common.Settings.Settings.instance().moduleSetting('showGridLineLabels');\n    this.showGridLineLabelsSetting.addChangeListener(this.onSettingChange, this);\n    this.extendGridLinesSetting = Common.Settings.Settings.instance().moduleSetting('extendGridLines');\n    this.extendGridLinesSetting.addChangeListener(this.onSettingChange, this);\n    this.showGridAreasSetting = Common.Settings.Settings.instance().moduleSetting('showGridAreas');\n    this.showGridAreasSetting.addChangeListener(this.onSettingChange, this);\n    this.showGridTrackSizesSetting = Common.Settings.Settings.instance().moduleSetting('showGridTrackSizes');\n    this.showGridTrackSizesSetting.addChangeListener(this.onSettingChange, this);\n  }\n\n  private onSettingChange(): void {\n    this.resetOverlay();\n  }\n\n  private buildGridHighlightConfig(nodeId: Protocol.DOM.NodeId): Protocol.Overlay.GridHighlightConfig {\n    const mainColor = this.colorOfGrid(nodeId);\n    const background = mainColor.setAlpha(0.1);\n    const gapBackground = mainColor.setAlpha(0.3);\n    const gapHatch = mainColor.setAlpha(0.8);\n\n    const showGridExtensionLines = (this.extendGridLinesSetting.get() as boolean);\n    const showPositiveLineNumbers = this.showGridLineLabelsSetting.get() === 'lineNumbers';\n    const showNegativeLineNumbers = showPositiveLineNumbers;\n    const showLineNames = this.showGridLineLabelsSetting.get() === 'lineNames';\n    return {\n      rowGapColor: gapBackground.toProtocolRGBA(),\n      rowHatchColor: gapHatch.toProtocolRGBA(),\n      columnGapColor: gapBackground.toProtocolRGBA(),\n      columnHatchColor: gapHatch.toProtocolRGBA(),\n      gridBorderColor: mainColor.toProtocolRGBA(),\n      gridBorderDash: false,\n      rowLineColor: mainColor.toProtocolRGBA(),\n      columnLineColor: mainColor.toProtocolRGBA(),\n      rowLineDash: true,\n      columnLineDash: true,\n      showGridExtensionLines,\n      showPositiveLineNumbers,\n      showNegativeLineNumbers,\n      showLineNames,\n      showAreaNames: (this.showGridAreasSetting.get() as boolean),\n      showTrackSizes: (this.showGridTrackSizesSetting.get() as boolean),\n      areaBorderColor: mainColor.toProtocolRGBA(),\n      gridBackgroundColor: background.toProtocolRGBA(),\n    };\n  }\n\n  private buildFlexContainerHighlightConfig(nodeId: Protocol.DOM.NodeId):\n      Protocol.Overlay.FlexContainerHighlightConfig {\n    const mainColor = this.colorOfFlex(nodeId);\n    return {\n      containerBorder: {color: mainColor.toProtocolRGBA(), pattern: Protocol.Overlay.LineStylePattern.Dashed},\n      itemSeparator: {color: mainColor.toProtocolRGBA(), pattern: Protocol.Overlay.LineStylePattern.Dotted},\n      lineSeparator: {color: mainColor.toProtocolRGBA(), pattern: Protocol.Overlay.LineStylePattern.Dashed},\n      mainDistributedSpace: {hatchColor: mainColor.toProtocolRGBA()},\n      crossDistributedSpace: {hatchColor: mainColor.toProtocolRGBA()},\n    };\n  }\n\n  private buildScrollSnapContainerHighlightConfig(_nodeId: number):\n      Protocol.Overlay.ScrollSnapContainerHighlightConfig {\n    return {\n      snapAreaBorder: {\n        color: Common.Color.PageHighlight.GridBorder.toProtocolRGBA(),\n        pattern: Protocol.Overlay.LineStylePattern.Dashed,\n      },\n      snapportBorder: {color: Common.Color.PageHighlight.GridBorder.toProtocolRGBA()},\n      scrollMarginColor: Common.Color.PageHighlight.Margin.toProtocolRGBA(),\n      scrollPaddingColor: Common.Color.PageHighlight.Padding.toProtocolRGBA(),\n    };\n  }\n\n  highlightGridInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    this.gridHighlights.set(nodeId, this.buildGridHighlightConfig(nodeId));\n    this.updateHighlightsInOverlay();\n  }\n\n  isGridHighlighted(nodeId: Protocol.DOM.NodeId): boolean {\n    return this.gridHighlights.has(nodeId);\n  }\n\n  colorOfGrid(nodeId: Protocol.DOM.NodeId): Common.Color.Color {\n    let color = this.colors.get(nodeId);\n    if (!color) {\n      color = this.gridColorGenerator.next();\n      this.colors.set(nodeId, color);\n    }\n\n    return color;\n  }\n\n  setColorOfGrid(nodeId: Protocol.DOM.NodeId, color: Common.Color.Color): void {\n    this.colors.set(nodeId, color);\n  }\n\n  hideGridInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (this.gridHighlights.has(nodeId)) {\n      this.gridHighlights.delete(nodeId);\n      this.updateHighlightsInOverlay();\n    }\n  }\n\n  highlightScrollSnapInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    this.scrollSnapHighlights.set(nodeId, this.buildScrollSnapContainerHighlightConfig(nodeId));\n    this.updateHighlightsInOverlay();\n  }\n\n  isScrollSnapHighlighted(nodeId: Protocol.DOM.NodeId): boolean {\n    return this.scrollSnapHighlights.has(nodeId);\n  }\n\n  hideScrollSnapInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (this.scrollSnapHighlights.has(nodeId)) {\n      this.scrollSnapHighlights.delete(nodeId);\n      this.updateHighlightsInOverlay();\n    }\n  }\n\n  highlightFlexInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    this.flexHighlights.set(nodeId, this.buildFlexContainerHighlightConfig(nodeId));\n    this.updateHighlightsInOverlay();\n  }\n\n  isFlexHighlighted(nodeId: Protocol.DOM.NodeId): boolean {\n    return this.flexHighlights.has(nodeId);\n  }\n\n  colorOfFlex(nodeId: Protocol.DOM.NodeId): Common.Color.Color {\n    let color = this.colors.get(nodeId);\n    if (!color) {\n      color = this.flexColorGenerator.next();\n      this.colors.set(nodeId, color);\n    }\n\n    return color;\n  }\n\n  setColorOfFlex(nodeId: Protocol.DOM.NodeId, color: Common.Color.Color): void {\n    this.colors.set(nodeId, color);\n  }\n\n  hideFlexInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (this.flexHighlights.has(nodeId)) {\n      this.flexHighlights.delete(nodeId);\n      this.updateHighlightsInOverlay();\n    }\n  }\n\n  highlightContainerQueryInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    this.containerQueryHighlights.set(nodeId, this.buildContainerQueryContainerHighlightConfig());\n    this.updateHighlightsInOverlay();\n  }\n\n  hideContainerQueryInOverlay(nodeId: Protocol.DOM.NodeId): void {\n    if (this.containerQueryHighlights.has(nodeId)) {\n      this.containerQueryHighlights.delete(nodeId);\n      this.updateHighlightsInOverlay();\n    }\n  }\n\n  isContainerQueryHighlighted(nodeId: Protocol.DOM.NodeId): boolean {\n    return this.containerQueryHighlights.has(nodeId);\n  }\n\n  private buildContainerQueryContainerHighlightConfig(): Protocol.Overlay.ContainerQueryContainerHighlightConfig {\n    return {\n      containerBorder: {\n        color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        pattern: Protocol.Overlay.LineStylePattern.Dashed,\n      },\n      descendantBorder: {\n        color: Common.Color.PageHighlight.LayoutLine.toProtocolRGBA(),\n        pattern: Protocol.Overlay.LineStylePattern.Dashed,\n      },\n    };\n  }\n\n  hideAllInOverlay(): void {\n    this.flexHighlights.clear();\n    this.gridHighlights.clear();\n    this.scrollSnapHighlights.clear();\n    this.containerQueryHighlights.clear();\n    this.updateHighlightsInOverlay();\n  }\n\n  refreshHighlights(): void {\n    const gridsNeedUpdate = this.updateHighlightsForDeletedNodes(this.gridHighlights);\n    const flexboxesNeedUpdate = this.updateHighlightsForDeletedNodes(this.flexHighlights);\n    const scrollSnapsNeedUpdate = this.updateHighlightsForDeletedNodes(this.scrollSnapHighlights);\n    const containerQueriesNeedUpdate = this.updateHighlightsForDeletedNodes(this.containerQueryHighlights);\n    if (flexboxesNeedUpdate || gridsNeedUpdate || scrollSnapsNeedUpdate || containerQueriesNeedUpdate) {\n      this.updateHighlightsInOverlay();\n    }\n  }\n\n  private updateHighlightsForDeletedNodes(highlights: Map<Protocol.DOM.NodeId, unknown>): boolean {\n    let needsUpdate = false;\n    for (const nodeId of highlights.keys()) {\n      if (this.model.getDOMModel().nodeForId(nodeId) === null) {\n        highlights.delete(nodeId);\n        needsUpdate = true;\n      }\n    }\n    return needsUpdate;\n  }\n\n  resetOverlay(): void {\n    for (const nodeId of this.gridHighlights.keys()) {\n      this.gridHighlights.set(nodeId, this.buildGridHighlightConfig(nodeId));\n    }\n    for (const nodeId of this.flexHighlights.keys()) {\n      this.flexHighlights.set(nodeId, this.buildFlexContainerHighlightConfig(nodeId));\n    }\n    for (const nodeId of this.scrollSnapHighlights.keys()) {\n      this.scrollSnapHighlights.set(nodeId, this.buildScrollSnapContainerHighlightConfig(nodeId));\n    }\n    for (const nodeId of this.containerQueryHighlights.keys()) {\n      this.containerQueryHighlights.set(nodeId, this.buildContainerQueryContainerHighlightConfig());\n    }\n    this.updateHighlightsInOverlay();\n  }\n\n  private updateHighlightsInOverlay(): void {\n    const hasNodesToHighlight =\n        this.gridHighlights.size > 0 || this.flexHighlights.size > 0 || this.containerQueryHighlights.size > 0;\n    this.model.setShowViewportSizeOnResize(!hasNodesToHighlight);\n    this.updateGridHighlightsInOverlay();\n    this.updateFlexHighlightsInOverlay();\n    this.updateScrollSnapHighlightsInOverlay();\n    this.updateContainerQueryHighlightsInOverlay();\n  }\n\n  private updateGridHighlightsInOverlay(): void {\n    const overlayModel = this.model;\n    const gridNodeHighlightConfigs = [];\n    for (const [nodeId, gridHighlightConfig] of this.gridHighlights.entries()) {\n      gridNodeHighlightConfigs.push({nodeId, gridHighlightConfig});\n    }\n    overlayModel.target().overlayAgent().invoke_setShowGridOverlays({gridNodeHighlightConfigs});\n  }\n\n  private updateFlexHighlightsInOverlay(): void {\n    if (!this.flexEnabled) {\n      return;\n    }\n    const overlayModel = this.model;\n    const flexNodeHighlightConfigs = [];\n    for (const [nodeId, flexContainerHighlightConfig] of this.flexHighlights.entries()) {\n      flexNodeHighlightConfigs.push({nodeId, flexContainerHighlightConfig});\n    }\n    overlayModel.target().overlayAgent().invoke_setShowFlexOverlays({flexNodeHighlightConfigs});\n  }\n\n  private updateScrollSnapHighlightsInOverlay(): void {\n    const overlayModel = this.model;\n    const scrollSnapHighlightConfigs = [];\n    for (const [nodeId, scrollSnapContainerHighlightConfig] of this.scrollSnapHighlights.entries()) {\n      scrollSnapHighlightConfigs.push({nodeId, scrollSnapContainerHighlightConfig});\n    }\n    overlayModel.target().overlayAgent().invoke_setShowScrollSnapOverlays({scrollSnapHighlightConfigs});\n  }\n\n  updateContainerQueryHighlightsInOverlay(): void {\n    const overlayModel = this.model;\n    const containerQueryHighlightConfigs = [];\n    for (const [nodeId, containerQueryContainerHighlightConfig] of this.containerQueryHighlights.entries()) {\n      containerQueryHighlightConfigs.push({nodeId, containerQueryContainerHighlightConfig});\n    }\n    overlayModel.target().overlayAgent().invoke_setShowContainerQueryOverlays({containerQueryHighlightConfigs});\n  }\n}\n\n/**\n * @interface\n */\nexport interface DOMModel {\n  nodeForId(nodeId: Protocol.DOM.NodeId): void;\n}\n/**\n * @interface\n */\nexport interface OverlayAgent {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  invoke_setShowGridOverlays(param: {\n    gridNodeHighlightConfigs: Array<{\n      nodeId: number,\n      gridHighlightConfig: Protocol.Overlay.GridHighlightConfig,\n    }>,\n  }): void;\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  invoke_setShowFlexOverlays(param: {\n    flexNodeHighlightConfigs: Array<{\n      nodeId: number,\n      flexContainerHighlightConfig: Protocol.Overlay.FlexContainerHighlightConfig,\n    }>,\n  }): void;\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  invoke_setShowScrollSnapOverlays(param: {\n    scrollSnapHighlightConfigs: Array<{\n      nodeId: number,\n    }>,\n  }): void;\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  invoke_setShowContainerQueryOverlays(param: {\n    containerQueryHighlightConfigs: Array<{\n      nodeId: number,\n      containerQueryContainerHighlightConfig: Protocol.Overlay.ContainerQueryContainerHighlightConfig,\n    }>,\n  }): void;\n}\n\n/**\n * @interface\n */\nexport interface Target {\n  overlayAgent(): OverlayAgent;\n}\n\n/**\n * @interface\n */\nexport interface OverlayModel {\n  getDOMModel(): DOMModel;\n\n  target(): Target;\n\n  setShowViewportSizeOnResize(value: boolean): void;\n}\n"]}