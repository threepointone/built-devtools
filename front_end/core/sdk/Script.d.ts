import * as Protocol from '../../generated/protocol.js';
import * as TextUtils from '../../models/text_utils/text_utils.js';
import * as Common from '../common/common.js';
import type { DebuggerModel } from './DebuggerModel.js';
import { Location } from './DebuggerModel.js';
import type { FrameAssociated } from './FrameAssociated.js';
import type { PageResourceLoadInitiator } from './PageResourceLoader.js';
import type { ExecutionContext } from './RuntimeModel.js';
import type { Target } from './Target.js';
export declare class Script implements TextUtils.ContentProvider.ContentProvider, FrameAssociated {
    debuggerModel: DebuggerModel;
    scriptId: Protocol.Runtime.ScriptId;
    sourceURL: string;
    lineOffset: number;
    columnOffset: number;
    endLine: number;
    endColumn: number;
    executionContextId: number;
    hash: string;
    private readonly isContentScriptInternal;
    private readonly isLiveEditInternal;
    sourceMapURL: string | undefined;
    debugSymbols: Protocol.Debugger.DebugSymbols | null;
    hasSourceURL: boolean;
    contentLength: number;
    private originalContentProviderInternal;
    originStackTrace: Protocol.Runtime.StackTrace | null;
    private readonly codeOffsetInternal;
    private readonly language;
    private contentPromise;
    private readonly embedderNameInternal;
    readonly isModule: boolean | null;
    constructor(debuggerModel: DebuggerModel, scriptId: Protocol.Runtime.ScriptId, sourceURL: string, startLine: number, startColumn: number, endLine: number, endColumn: number, executionContextId: number, hash: string, isContentScript: boolean, isLiveEdit: boolean, sourceMapURL: string | undefined, hasSourceURL: boolean, length: number, isModule: boolean | null, originStackTrace: Protocol.Runtime.StackTrace | null, codeOffset: number | null, scriptLanguage: string | null, debugSymbols: Protocol.Debugger.DebugSymbols | null, embedderName: string | null);
    embedderName(): string | null;
    target(): Target;
    private static trimSourceURLComment;
    isContentScript(): boolean;
    codeOffset(): number | null;
    isJavaScript(): boolean;
    isWasm(): boolean;
    scriptLanguage(): string | null;
    executionContext(): ExecutionContext | null;
    isLiveEdit(): boolean;
    contentURL(): string;
    contentType(): Common.ResourceType.ResourceType;
    contentEncoded(): Promise<boolean>;
    requestContent(): Promise<TextUtils.ContentProvider.DeferredContent>;
    getWasmBytecode(): Promise<ArrayBuffer>;
    originalContentProvider(): TextUtils.ContentProvider.ContentProvider;
    searchInContent(query: string, caseSensitive: boolean, isRegex: boolean): Promise<TextUtils.ContentProvider.SearchMatch[]>;
    private appendSourceURLCommentIfNeeded;
    editSource(newSource: string, callback: (error: string | null, arg1?: Protocol.Runtime.ExceptionDetails | undefined, arg2?: Array<Protocol.Debugger.CallFrame> | undefined, arg3?: Protocol.Runtime.StackTrace | undefined, arg4?: Protocol.Runtime.StackTraceId | undefined, arg5?: boolean | undefined) => void): Promise<void>;
    rawLocation(lineNumber: number, columnNumber: number): Location | null;
    toRelativeLocation(location: Location): number[];
    isInlineScript(): boolean;
    isAnonymousScript(): boolean;
    isInlineScriptWithSourceURL(): boolean;
    setBlackboxedRanges(positions: Protocol.Debugger.ScriptPosition[]): Promise<boolean>;
    containsLocation(lineNumber: number, columnNumber: number): boolean;
    get frameId(): Protocol.Page.FrameId;
    createPageResourceLoadInitiator(): PageResourceLoadInitiator;
}
export declare const sourceURLRegex: RegExp;
