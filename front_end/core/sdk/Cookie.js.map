{"version":3,"file":"Cookie.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/Cookie.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nexport class Cookie {\n  private readonly nameInternal: string;\n  private readonly valueInternal: string;\n  private readonly typeInternal: Type|null|undefined;\n  private attributes: {\n    [x: string]: string|number|boolean|undefined,\n  };\n  private sizeInternal: number;\n  private priorityInternal: Protocol.Network.CookiePriority;\n  private cookieLine: string|null;\n  constructor(name: string, value: string, type?: Type|null, priority?: Protocol.Network.CookiePriority) {\n    this.nameInternal = name;\n    this.valueInternal = value;\n    this.typeInternal = type;\n    this.attributes = {};\n    this.sizeInternal = 0;\n    this.priorityInternal = (priority || 'Medium' as Protocol.Network.CookiePriority);\n    this.cookieLine = null;\n  }\n\n  static fromProtocolCookie(protocolCookie: Protocol.Network.Cookie): Cookie {\n    const cookie = new Cookie(protocolCookie.name, protocolCookie.value, null, protocolCookie.priority);\n    cookie.addAttribute('domain', protocolCookie['domain']);\n    cookie.addAttribute('path', protocolCookie['path']);\n    if (protocolCookie['expires']) {\n      cookie.addAttribute('expires', protocolCookie['expires'] * 1000);\n    }\n    if (protocolCookie['httpOnly']) {\n      cookie.addAttribute('httpOnly');\n    }\n    if (protocolCookie['secure']) {\n      cookie.addAttribute('secure');\n    }\n    if (protocolCookie['sameSite']) {\n      cookie.addAttribute('sameSite', protocolCookie['sameSite']);\n    }\n    if (protocolCookie.sameParty) {\n      cookie.addAttribute('sameParty');\n    }\n    if ('sourcePort' in protocolCookie) {\n      cookie.addAttribute('sourcePort', protocolCookie.sourcePort);\n    }\n    if ('sourceScheme' in protocolCookie) {\n      cookie.addAttribute('sourceScheme', protocolCookie.sourceScheme);\n    }\n    cookie.setSize(protocolCookie['size']);\n    return cookie;\n  }\n\n  key(): string {\n    return (this.domain() || '-') + ' ' + this.name() + ' ' + (this.path() || '-');\n  }\n\n  name(): string {\n    return this.nameInternal;\n  }\n\n  value(): string {\n    return this.valueInternal;\n  }\n\n  type(): Type|null|undefined {\n    return this.typeInternal;\n  }\n\n  httpOnly(): boolean {\n    return 'httponly' in this.attributes;\n  }\n\n  secure(): boolean {\n    return 'secure' in this.attributes;\n  }\n\n  sameSite(): Protocol.Network.CookieSameSite {\n    // TODO(allada) This should not rely on attributes and instead store them individually.\n    // when attributes get added via addAttribute() they are lowercased, hence the lowercasing of samesite here\n    return this.attributes['samesite'] as Protocol.Network.CookieSameSite;\n  }\n\n  sameParty(): boolean {\n    return 'sameparty' in this.attributes;\n  }\n\n  priority(): Protocol.Network.CookiePriority {\n    return this.priorityInternal;\n  }\n\n  session(): boolean {\n    // RFC 2965 suggests using Discard attribute to mark session cookies, but this does not seem to be widely used.\n    // Check for absence of explicitly max-age or expiry date instead.\n    return !('expires' in this.attributes || 'max-age' in this.attributes);\n  }\n\n  path(): string {\n    return this.attributes['path'] as string;\n  }\n\n  domain(): string {\n    return this.attributes['domain'] as string;\n  }\n\n  expires(): number {\n    return this.attributes['expires'] as number;\n  }\n\n  maxAge(): number {\n    return this.attributes['max-age'] as number;\n  }\n\n  sourcePort(): number {\n    return this.attributes['sourceport'] as number;\n  }\n\n  sourceScheme(): Protocol.Network.CookieSourceScheme {\n    return this.attributes['sourcescheme'] as Protocol.Network.CookieSourceScheme;\n  }\n\n  size(): number {\n    return this.sizeInternal;\n  }\n\n  /**\n   * @deprecated\n   */\n  url(): string|null {\n    if (!this.domain() || !this.path()) {\n      return null;\n    }\n    let port = '';\n    const sourcePort = this.sourcePort();\n    // Do not include standard ports to ensure the back-end will change standard ports according to the scheme.\n    if (sourcePort && sourcePort !== 80 && sourcePort !== 443) {\n      port = `:${this.sourcePort()}`;\n    }\n    // We must not consider the this.sourceScheme() here, otherwise it will be impossible to set a cookie without\n    // the Secure attribute from a secure origin.\n    return (this.secure() ? 'https://' : 'http://') + this.domain() + port + this.path();\n  }\n\n  setSize(size: number): void {\n    this.sizeInternal = size;\n  }\n\n  expiresDate(requestDate: Date): Date|null {\n    // RFC 6265 indicates that the max-age attribute takes precedence over the expires attribute\n    if (this.maxAge()) {\n      return new Date(requestDate.getTime() + 1000 * this.maxAge());\n    }\n\n    if (this.expires()) {\n      return new Date(this.expires());\n    }\n\n    return null;\n  }\n\n  addAttribute(key: string, value?: string|number|boolean): void {\n    const normalizedKey = key.toLowerCase();\n    switch (normalizedKey) {\n      case 'priority':\n        this.priorityInternal = (value as Protocol.Network.CookiePriority);\n        break;\n      default:\n        this.attributes[normalizedKey] = value;\n    }\n  }\n\n  setCookieLine(cookieLine: string): void {\n    this.cookieLine = cookieLine;\n  }\n\n  getCookieLine(): string|null {\n    return this.cookieLine;\n  }\n\n  matchesSecurityOrigin(securityOrigin: string): boolean {\n    const hostname = new URL(securityOrigin).hostname;\n    return Cookie.isDomainMatch(this.domain(), hostname);\n  }\n\n  static isDomainMatch(domain: string, hostname: string): boolean {\n    // This implementation mirrors\n    // https://source.chromium.org/search?q=net::cookie_util::IsDomainMatch()\n    //\n    // Can domain match in two ways; as a domain cookie (where the cookie\n    // domain begins with \".\") or as a host cookie (where it doesn't).\n\n    // Some consumers of the CookieMonster expect to set cookies on\n    // URLs like http://.strange.url.  To retrieve cookies in this instance,\n    // we allow matching as a host cookie even when the domain_ starts with\n    // a period.\n    if (hostname === domain) {\n      return true;\n    }\n\n    // Domain cookie must have an initial \".\".  To match, it must be\n    // equal to url's host with initial period removed, or a suffix of\n    // it.\n\n    // Arguably this should only apply to \"http\" or \"https\" cookies, but\n    // extension cookie tests currently use the funtionality, and if we\n    // ever decide to implement that it should be done by preventing\n    // such cookies from being set.\n    if (!domain || domain[0] !== '.') {\n      return false;\n    }\n\n    // The host with a \".\" prefixed.\n    if (domain.substr(1) === hostname) {\n      return true;\n    }\n\n    // A pure suffix of the host (ok since we know the domain already\n    // starts with a \".\")\n    return hostname.length > domain.length && hostname.endsWith(domain);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Type {\n  Request = 0,\n  Response = 1,\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Attributes {\n  Name = 'name',\n  Value = 'value',\n  Size = 'size',\n  Domain = 'domain',\n  Path = 'path',\n  Expires = 'expires',\n  HttpOnly = 'httpOnly',\n  Secure = 'secure',\n  SameSite = 'sameSite',\n  SameParty = 'sameParty',\n  SourceScheme = 'sourceScheme',\n  SourcePort = 'sourcePort',\n  Priority = 'priority',\n}\n\n/**\n * A `CookieReference` uniquely identifies a cookie by the triple (name,domain,path). Additionally, a context may be\n * included to make it clear which site under Application>Cookies should be opened when revealing a `CookieReference`.\n */\nexport class CookieReference {\n  private readonly name: string;\n  private readonly domainInternal: string;\n  private readonly path: string;\n  private readonly contextUrlInternal: string|undefined;\n  constructor(name: string, domain: string, path: string, contextUrl: string|undefined) {\n    this.name = name;\n    this.domainInternal = domain;\n    this.path = path;\n    this.contextUrlInternal = contextUrl;\n  }\n\n  domain(): string {\n    return this.domainInternal;\n  }\n\n  contextUrl(): string|undefined {\n    return this.contextUrlInternal;\n  }\n}\n"]}