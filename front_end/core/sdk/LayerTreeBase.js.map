{"version":3,"file":"LayerTreeBase.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/LayerTreeBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {DOMNode} from './DOMModel.js';\nimport {DOMModel} from './DOMModel.js';\nimport type {SnapshotWithRect} from './PaintProfiler.js';\nimport type {Target} from './Target.js';\n\nexport interface Layer {\n  id(): string;\n  parentId(): string|null;\n  parent(): Layer|null;\n  isRoot(): boolean;\n  children(): Layer[];\n  addChild(child: Layer): void;\n  node(): DOMNode|null;\n  nodeForSelfOrAncestor(): DOMNode|null;\n  offsetX(): number;\n  offsetY(): number;\n  width(): number;\n  height(): number;\n  transform(): number[]|null;\n  quad(): number[];\n  anchorPoint(): number[];\n  invisible(): boolean;\n  paintCount(): number;\n  lastPaintRect(): Protocol.DOM.Rect|null;\n  scrollRects(): Protocol.LayerTree.ScrollRect[];\n  stickyPositionConstraint(): StickyPositionConstraint|null;\n  gpuMemoryUsage(): number;\n  requestCompositingReasonIds(): Promise<string[]>;\n  drawsContent(): boolean;\n  snapshots(): Promise<SnapshotWithRect|null>[];\n}\n\nexport namespace Layer {\n  // TODO(crbug.com/1167717): Make this a const enum again\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum ScrollRectType {\n    NonFastScrollable = 'NonFastScrollable',\n    TouchEventHandler = 'TouchEventHandler',\n    WheelEventHandler = 'WheelEventHandler',\n    RepaintsOnScroll = 'RepaintsOnScroll',\n    MainThreadScrollingReason = 'MainThreadScrollingReason',\n  }\n}\n\nexport class StickyPositionConstraint {\n  private readonly stickyBoxRectInternal: Protocol.DOM.Rect;\n  private readonly containingBlockRectInternal: Protocol.DOM.Rect;\n  private readonly nearestLayerShiftingStickyBoxInternal: Layer|null;\n  private readonly nearestLayerShiftingContainingBlockInternal: Layer|null;\n\n  constructor(layerTree: LayerTreeBase|null, constraint: Protocol.LayerTree.StickyPositionConstraint) {\n    this.stickyBoxRectInternal = constraint.stickyBoxRect;\n    this.containingBlockRectInternal = constraint.containingBlockRect;\n    this.nearestLayerShiftingStickyBoxInternal = null;\n    if (layerTree && constraint.nearestLayerShiftingStickyBox) {\n      this.nearestLayerShiftingStickyBoxInternal = layerTree.layerById(constraint.nearestLayerShiftingStickyBox);\n    }\n\n    this.nearestLayerShiftingContainingBlockInternal = null;\n    if (layerTree && constraint.nearestLayerShiftingContainingBlock) {\n      this.nearestLayerShiftingContainingBlockInternal =\n          layerTree.layerById(constraint.nearestLayerShiftingContainingBlock);\n    }\n  }\n\n  stickyBoxRect(): Protocol.DOM.Rect {\n    return this.stickyBoxRectInternal;\n  }\n\n  containingBlockRect(): Protocol.DOM.Rect {\n    return this.containingBlockRectInternal;\n  }\n\n  nearestLayerShiftingStickyBox(): Layer|null {\n    return this.nearestLayerShiftingStickyBoxInternal;\n  }\n\n  nearestLayerShiftingContainingBlock(): Layer|null {\n    return this.nearestLayerShiftingContainingBlockInternal;\n  }\n}\n\nexport class LayerTreeBase {\n  private readonly targetInternal: Target|null;\n  private domModel: DOMModel|null;\n  layersById: Map<string|number, Layer>;\n  private rootInternal: Layer|null;\n  private contentRootInternal: Layer|null;\n  private readonly backendNodeIdToNodeInternal: Map<Protocol.DOM.BackendNodeId, DOMNode|null>;\n  private viewportSizeInternal?: {\n    width: number,\n    height: number,\n  };\n\n  constructor(target: Target|null) {\n    this.targetInternal = target;\n    this.domModel = target ? target.model(DOMModel) : null;\n    this.layersById = new Map();\n    this.rootInternal = null;\n    this.contentRootInternal = null;\n    this.backendNodeIdToNodeInternal = new Map();\n  }\n\n  target(): Target|null {\n    return this.targetInternal;\n  }\n\n  root(): Layer|null {\n    return this.rootInternal;\n  }\n\n  setRoot(root: Layer|null): void {\n    this.rootInternal = root;\n  }\n\n  contentRoot(): Layer|null {\n    return this.contentRootInternal;\n  }\n\n  setContentRoot(contentRoot: Layer|null): void {\n    this.contentRootInternal = contentRoot;\n  }\n\n  forEachLayer<T>(callback: (arg0: Layer) => T, root?: Layer|null): T|boolean {\n    if (!root) {\n      root = this.root();\n      if (!root) {\n        return false;\n      }\n    }\n    return callback(root) || root.children().some(this.forEachLayer.bind(this, callback));\n  }\n\n  layerById(id: string): Layer|null {\n    return this.layersById.get(id) || null;\n  }\n\n  async resolveBackendNodeIds(requestedNodeIds: Set<Protocol.DOM.BackendNodeId>): Promise<void> {\n    if (!requestedNodeIds.size || !this.domModel) {\n      return;\n    }\n\n    const nodesMap = await this.domModel.pushNodesByBackendIdsToFrontend(requestedNodeIds);\n\n    if (!nodesMap) {\n      return;\n    }\n    for (const nodeId of nodesMap.keys()) {\n      this.backendNodeIdToNodeInternal.set(nodeId, nodesMap.get(nodeId) || null);\n    }\n  }\n\n  backendNodeIdToNode(): Map<Protocol.DOM.BackendNodeId, DOMNode|null> {\n    return this.backendNodeIdToNodeInternal;\n  }\n\n  setViewportSize(viewportSize: {\n    width: number,\n    height: number,\n  }): void {\n    this.viewportSizeInternal = viewportSize;\n  }\n\n  viewportSize(): {\n    width: number,\n    height: number,\n  }|undefined {\n    return this.viewportSizeInternal;\n  }\n\n  private nodeForId(id: Protocol.DOM.NodeId): DOMNode|null {\n    return this.domModel ? this.domModel.nodeForId(id) : null;\n  }\n}\n"]}