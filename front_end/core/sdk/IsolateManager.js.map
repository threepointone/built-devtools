{"version":3,"file":"IsolateManager.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/IsolateManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\n\nimport type {HeapProfilerModel} from './HeapProfilerModel.js';\nimport {RuntimeModel} from './RuntimeModel.js';\nimport type {SDKModelObserver} from './TargetManager.js';\nimport {TargetManager} from './TargetManager.js';\n\nlet isolateManagerInstance: IsolateManager;\n\nexport class IsolateManager extends Common.ObjectWrapper.ObjectWrapper implements SDKModelObserver<RuntimeModel> {\n  private readonly isolatesInternal: Map<string, Isolate>;\n  private isolateIdByModel: Map<RuntimeModel, string|null>;\n  private observers: Set<Observer>;\n  private pollId: number;\n\n  constructor() {\n    super();\n    this.isolatesInternal = new Map();\n    // isolateIdByModel contains null while the isolateId is being retrieved.\n    this.isolateIdByModel = new Map();\n    this.observers = new Set();\n    TargetManager.instance().observeModels(RuntimeModel, this);\n    this.pollId = 0;\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): IsolateManager {\n    if (!isolateManagerInstance || forceNew) {\n      isolateManagerInstance = new IsolateManager();\n    }\n\n    return isolateManagerInstance;\n  }\n\n  observeIsolates(observer: Observer): void {\n    if (this.observers.has(observer)) {\n      throw new Error('Observer can only be registered once');\n    }\n    if (!this.observers.size) {\n      this.poll();\n    }\n    this.observers.add(observer);\n    for (const isolate of this.isolatesInternal.values()) {\n      observer.isolateAdded(isolate);\n    }\n  }\n\n  unobserveIsolates(observer: Observer): void {\n    this.observers.delete(observer);\n    if (!this.observers.size) {\n      ++this.pollId;\n    }  // Stops the current polling loop.\n  }\n\n  modelAdded(model: RuntimeModel): void {\n    this.modelAddedInternal(model);\n  }\n\n  private async modelAddedInternal(model: RuntimeModel): Promise<void> {\n    this.isolateIdByModel.set(model, null);\n    const isolateId = await model.isolateId();\n    if (!this.isolateIdByModel.has(model)) {\n      // The model has been removed during await.\n      return;\n    }\n    if (!isolateId) {\n      this.isolateIdByModel.delete(model);\n      return;\n    }\n    this.isolateIdByModel.set(model, isolateId);\n    let isolate = this.isolatesInternal.get(isolateId);\n    if (!isolate) {\n      isolate = new Isolate(isolateId);\n      this.isolatesInternal.set(isolateId, isolate);\n    }\n    isolate.modelsInternal.add(model);\n    if (isolate.modelsInternal.size === 1) {\n      for (const observer of this.observers) {\n        observer.isolateAdded(isolate);\n      }\n    } else {\n      for (const observer of this.observers) {\n        observer.isolateChanged(isolate);\n      }\n    }\n  }\n\n  modelRemoved(model: RuntimeModel): void {\n    const isolateId = this.isolateIdByModel.get(model);\n    this.isolateIdByModel.delete(model);\n    if (!isolateId) {\n      return;\n    }\n    const isolate = this.isolatesInternal.get(isolateId);\n    if (!isolate) {\n      return;\n    }\n    isolate.modelsInternal.delete(model);\n    if (isolate.modelsInternal.size) {\n      for (const observer of this.observers) {\n        observer.isolateChanged(isolate);\n      }\n      return;\n    }\n    for (const observer of this.observers) {\n      observer.isolateRemoved(isolate);\n    }\n    this.isolatesInternal.delete(isolateId);\n  }\n\n  isolateByModel(model: RuntimeModel): Isolate|null {\n    return this.isolatesInternal.get(this.isolateIdByModel.get(model) || '') || null;\n  }\n\n  isolates(): Iterable<Isolate> {\n    return this.isolatesInternal.values();\n  }\n\n  private async poll(): Promise<void> {\n    const pollId = this.pollId;\n    while (pollId === this.pollId) {\n      await Promise.all(Array.from(this.isolates(), isolate => isolate.update()));\n      await new Promise(r => setTimeout(r, PollIntervalMs));\n    }\n  }\n}\n\nexport interface Observer {\n  isolateAdded(isolate: Isolate): void;\n\n  isolateRemoved(isolate: Isolate): void;\n  isolateChanged(isolate: Isolate): void;\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  MemoryChanged = 'MemoryChanged',\n}\n\nexport const MemoryTrendWindowMs = 120e3;\nconst PollIntervalMs = 2e3;\n\nexport class Isolate {\n  private readonly idInternal: string;\n  readonly modelsInternal: Set<RuntimeModel>;\n  private usedHeapSizeInternal: number;\n  private readonly memoryTrend: MemoryTrend;\n\n  constructor(id: string) {\n    this.idInternal = id;\n    this.modelsInternal = new Set();\n    this.usedHeapSizeInternal = 0;\n    const count = MemoryTrendWindowMs / PollIntervalMs;\n    this.memoryTrend = new MemoryTrend(count);\n  }\n\n  id(): string {\n    return this.idInternal;\n  }\n\n  models(): Set<RuntimeModel> {\n    return this.modelsInternal;\n  }\n\n  runtimeModel(): RuntimeModel|null {\n    return this.modelsInternal.values().next().value || null;\n  }\n\n  heapProfilerModel(): HeapProfilerModel|null {\n    const runtimeModel = this.runtimeModel();\n    return runtimeModel && runtimeModel.heapProfilerModel();\n  }\n\n  async update(): Promise<void> {\n    const model = this.runtimeModel();\n    const usage = model && await model.heapUsage();\n    if (!usage) {\n      return;\n    }\n    this.usedHeapSizeInternal = usage.usedSize;\n    this.memoryTrend.add(this.usedHeapSizeInternal);\n    IsolateManager.instance().dispatchEventToListeners(Events.MemoryChanged, this);\n  }\n\n  samplesCount(): number {\n    return this.memoryTrend.count();\n  }\n\n  usedHeapSize(): number {\n    return this.usedHeapSizeInternal;\n  }\n\n  /**\n   * bytes per millisecond\n   */\n  usedHeapSizeGrowRate(): number {\n    return this.memoryTrend.fitSlope();\n  }\n\n  isMainThread(): boolean {\n    const model = this.runtimeModel();\n    return model ? model.target().id() === 'main' : false;\n  }\n}\n\nexport class MemoryTrend {\n  private maxCount: number;\n  private base!: number;\n  private index!: number;\n  private x!: number[];\n  private y!: number[];\n  private sx!: number;\n  private sy!: number;\n  private sxx!: number;\n  private sxy!: number;\n  constructor(maxCount: number) {\n    this.maxCount = maxCount | 0;\n    this.reset();\n  }\n\n  reset(): void {\n    this.base = Date.now();\n    this.index = 0;\n    this.x = [];\n    this.y = [];\n    this.sx = 0;\n    this.sy = 0;\n    this.sxx = 0;\n    this.sxy = 0;\n  }\n\n  count(): number {\n    return this.x.length;\n  }\n\n  add(heapSize: number, timestamp?: number): void {\n    const x = typeof timestamp === 'number' ? timestamp : Date.now() - this.base;\n    const y = heapSize;\n    if (this.x.length === this.maxCount) {\n      // Turns into a cyclic buffer once it reaches the |maxCount|.\n      const x0 = this.x[this.index];\n      const y0 = this.y[this.index];\n      this.sx -= x0;\n      this.sy -= y0;\n      this.sxx -= x0 * x0;\n      this.sxy -= x0 * y0;\n    }\n    this.sx += x;\n    this.sy += y;\n    this.sxx += x * x;\n    this.sxy += x * y;\n    this.x[this.index] = x;\n    this.y[this.index] = y;\n    this.index = (this.index + 1) % this.maxCount;\n  }\n\n  fitSlope(): number {\n    // We use the linear regression model to find the slope.\n    const n = this.count();\n    return n < 2 ? 0 : (this.sxy - this.sx * this.sy / n) / (this.sxx - this.sx * this.sx / n);\n  }\n}\n"]}