{"version":3,"file":"Connections.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/Connections.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\nimport * as ProtocolClient from '../protocol_client/protocol_client.js';\nimport * as Root from '../root/root.js';\n\nimport {TargetManager} from './TargetManager.js';\n\nexport class MainConnection implements ProtocolClient.InspectorBackend.Connection {\n  onMessage: ((arg0: (Object|string)) => void)|null;\n  private onDisconnect: ((arg0: string) => void)|null;\n  private messageBuffer: string;\n  private messageSize: number;\n  private readonly eventListeners: Common.EventTarget.EventDescriptor[];\n  constructor() {\n    this.onMessage = null;\n    this.onDisconnect = null;\n    this.messageBuffer = '';\n    this.messageSize = 0;\n    this.eventListeners = [\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n          Host.InspectorFrontendHostAPI.Events.DispatchMessage, this.dispatchMessage, this),\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n          Host.InspectorFrontendHostAPI.Events.DispatchMessageChunk, this.dispatchMessageChunk, this),\n    ];\n  }\n\n  setOnMessage(onMessage: (arg0: (Object|string)) => void): void {\n    this.onMessage = onMessage;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.onDisconnect = onDisconnect;\n  }\n\n  sendRawMessage(message: string): void {\n    if (this.onMessage) {\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.sendMessageToBackend(message);\n    }\n  }\n\n  private dispatchMessage(event: Common.EventTarget.EventTargetEvent): void {\n    if (this.onMessage) {\n      this.onMessage.call(null, (event.data as string));\n    }\n  }\n\n  private dispatchMessageChunk(event: Common.EventTarget.EventTargetEvent): void {\n    const messageChunk = (event.data['messageChunk'] as string);\n    const messageSize = (event.data['messageSize'] as number);\n    if (messageSize) {\n      this.messageBuffer = '';\n      this.messageSize = messageSize;\n    }\n    this.messageBuffer += messageChunk;\n    if (this.messageBuffer.length === this.messageSize && this.onMessage) {\n      this.onMessage.call(null, this.messageBuffer);\n      this.messageBuffer = '';\n      this.messageSize = 0;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    const onDisconnect = this.onDisconnect;\n    Common.EventTarget.removeEventListeners(this.eventListeners);\n    this.onDisconnect = null;\n    this.onMessage = null;\n\n    if (onDisconnect) {\n      onDisconnect.call(null, 'force disconnect');\n    }\n  }\n}\n\nexport class WebSocketConnection implements ProtocolClient.InspectorBackend.Connection {\n  private socket: WebSocket|null;\n  onMessage: ((arg0: (Object|string)) => void)|null;\n  private onDisconnect: ((arg0: string) => void)|null;\n  private onWebSocketDisconnect: (() => void)|null;\n  private connected: boolean;\n  private messages: string[];\n  constructor(url: string, onWebSocketDisconnect: () => void) {\n    this.socket = new WebSocket(url);\n    this.socket.onerror = this.onError.bind(this);\n    this.socket.onopen = this.onOpen.bind(this);\n    this.socket.onmessage = (messageEvent: MessageEvent<string>): void => {\n      if (this.onMessage) {\n        this.onMessage.call(null, messageEvent.data);\n      }\n    };\n    this.socket.onclose = this.onClose.bind(this);\n\n    this.onMessage = null;\n    this.onDisconnect = null;\n    this.onWebSocketDisconnect = onWebSocketDisconnect;\n    this.connected = false;\n    this.messages = [];\n  }\n\n  setOnMessage(onMessage: (arg0: (Object|string)) => void): void {\n    this.onMessage = onMessage;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.onDisconnect = onDisconnect;\n  }\n\n  private onError(): void {\n    if (this.onWebSocketDisconnect) {\n      this.onWebSocketDisconnect.call(null);\n    }\n    if (this.onDisconnect) {\n      // This is called if error occurred while connecting.\n      this.onDisconnect.call(null, 'connection failed');\n    }\n    this.close();\n  }\n\n  private onOpen(): void {\n    this.connected = true;\n    if (this.socket) {\n      this.socket.onerror = console.error;\n      for (const message of this.messages) {\n        this.socket.send(message);\n      }\n    }\n    this.messages = [];\n  }\n\n  private onClose(): void {\n    if (this.onWebSocketDisconnect) {\n      this.onWebSocketDisconnect.call(null);\n    }\n    if (this.onDisconnect) {\n      this.onDisconnect.call(null, 'websocket closed');\n    }\n    this.close();\n  }\n\n  private close(callback?: (() => void)): void {\n    if (this.socket) {\n      this.socket.onerror = null;\n      this.socket.onopen = null;\n      this.socket.onclose = callback || null;\n      this.socket.onmessage = null;\n      this.socket.close();\n      this.socket = null;\n    }\n    this.onWebSocketDisconnect = null;\n  }\n\n  sendRawMessage(message: string): void {\n    if (this.connected && this.socket) {\n      this.socket.send(message);\n    } else {\n      this.messages.push(message);\n    }\n  }\n\n  disconnect(): Promise<void> {\n    return new Promise(fulfill => {\n      this.close(() => {\n        if (this.onDisconnect) {\n          this.onDisconnect.call(null, 'force disconnect');\n        }\n        fulfill();\n      });\n    });\n  }\n}\n\nexport class StubConnection implements ProtocolClient.InspectorBackend.Connection {\n  onMessage: ((arg0: (Object|string)) => void)|null;\n  private onDisconnect: ((arg0: string) => void)|null;\n  constructor() {\n    this.onMessage = null;\n    this.onDisconnect = null;\n  }\n\n  setOnMessage(onMessage: (arg0: (Object|string)) => void): void {\n    this.onMessage = onMessage;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.onDisconnect = onDisconnect;\n  }\n\n  sendRawMessage(message: string): void {\n    setTimeout(this.respondWithError.bind(this, message), 0);\n  }\n\n  private respondWithError(message: string): void {\n    const messageObject = JSON.parse(message);\n    const error = {\n      message: 'This is a stub connection, can\\'t dispatch message.',\n      code: ProtocolClient.InspectorBackend.DevToolsStubErrorCode,\n      data: messageObject,\n    };\n    if (this.onMessage) {\n      this.onMessage.call(null, {id: messageObject.id, error: error});\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.onDisconnect) {\n      this.onDisconnect.call(null, 'force disconnect');\n    }\n    this.onDisconnect = null;\n    this.onMessage = null;\n  }\n}\n\nexport class ParallelConnection implements ProtocolClient.InspectorBackend.Connection {\n  private readonly connection: ProtocolClient.InspectorBackend.Connection;\n  private sessionId: string;\n  onMessage: ((arg0: Object) => void)|null;\n  private onDisconnect: ((arg0: string) => void)|null;\n  constructor(connection: ProtocolClient.InspectorBackend.Connection, sessionId: string) {\n    this.connection = connection;\n    this.sessionId = sessionId;\n    this.onMessage = null;\n    this.onDisconnect = null;\n  }\n\n  setOnMessage(onMessage: (arg0: Object) => void): void {\n    this.onMessage = onMessage;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.onDisconnect = onDisconnect;\n  }\n\n  getOnDisconnect(): ((arg0: string) => void)|null {\n    return this.onDisconnect;\n  }\n\n  sendRawMessage(message: string): void {\n    const messageObject = JSON.parse(message);\n    // If the message isn't for a specific session, it must be for the root session.\n    if (!messageObject.sessionId) {\n      messageObject.sessionId = this.sessionId;\n    }\n    this.connection.sendRawMessage(JSON.stringify(messageObject));\n  }\n\n  getSessionId(): string {\n    return this.sessionId;\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.onDisconnect) {\n      this.onDisconnect.call(null, 'force disconnect');\n    }\n    this.onDisconnect = null;\n    this.onMessage = null;\n  }\n}\n\nexport async function initMainConnection(\n    createMainTarget: () => Promise<void>, websocketConnectionLost: () => void): Promise<void> {\n  ProtocolClient.InspectorBackend.Connection.setFactory(createMainConnection.bind(null, websocketConnectionLost));\n  await createMainTarget();\n  Host.InspectorFrontendHost.InspectorFrontendHostInstance.connectionReady();\n  Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n      Host.InspectorFrontendHostAPI.Events.ReattachMainTarget, () => {\n        const target = TargetManager.instance().mainTarget();\n        if (target) {\n          const router = target.router();\n          if (router) {\n            router.connection().disconnect();\n          }\n        }\n        createMainTarget();\n      });\n}\n\nfunction createMainConnection(websocketConnectionLost: () => void): ProtocolClient.InspectorBackend.Connection {\n  const wsParam = Root.Runtime.Runtime.queryParam('ws');\n  const wssParam = Root.Runtime.Runtime.queryParam('wss');\n  if (wsParam || wssParam) {\n    const ws = wsParam ? `ws://${wsParam}` : `wss://${wssParam}`;\n    return new WebSocketConnection(ws, websocketConnectionLost);\n  }\n  if (Host.InspectorFrontendHost.InspectorFrontendHostInstance.isHostedMode()) {\n    return new StubConnection();\n  }\n\n  return new MainConnection();\n}\n"]}