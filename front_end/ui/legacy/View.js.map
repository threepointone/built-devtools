{"version":3,"file":"View.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/View.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAI7B,OAAO,EAAC,WAAW,EAAC,MAAM,kBAAkB,CAAC;AAE7C,OAAO,EAAC,IAAI,EAAC,MAAM,aAAa,CAAC;AAiBjC,MAAM,OAAO,UAAW,SAAQ,IAAI;IACjB,aAAa,CAAS;IACvC,YAAY,KAAa,EAAE,cAAwB;QACjD,KAAK,CAAC,cAAc,CAAC,CAAC;QACtB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED,KAAK;QACH,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED,WAAW;QACT,OAAO,KAAK,CAAC;IACf,CAAC;IAED,WAAW;QACT,OAAO,KAAK,CAAC;IACf,CAAC;IAED,YAAY;QACV,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;IAED,MAAM;QACJ,OAAQ,OAAO,CAAC,OAAO,CAAC,IAAI,CAAqB,CAAC;IACpD,CAAC;IAED,UAAU;QACR,OAAO,WAAW,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC;IAED,WAAW;IACX,CAAC;CACF","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {TabbedPane} from './TabbedPane.js';\nimport type {ToolbarItem, ToolbarMenuButton} from './Toolbar.js';\nimport {ViewManager} from './ViewManager.js';\nimport type {Widget} from './Widget.js';\nimport {VBox} from './Widget.js';\nexport interface View {\n  viewId(): string;\n\n  title(): string;\n\n  isCloseable(): boolean;\n\n  isTransient(): boolean;\n\n  toolbarItems(): Promise<ToolbarItem[]>;\n\n  widget(): Promise<Widget>;\n\n  disposeView(): void|Promise<void>;\n}\n\nexport class SimpleView extends VBox implements View {\n  private readonly titleInternal: string;\n  constructor(title: string, isWebComponent?: boolean) {\n    super(isWebComponent);\n    this.titleInternal = title;\n  }\n\n  viewId(): string {\n    return this.titleInternal;\n  }\n\n  title(): string {\n    return this.titleInternal;\n  }\n\n  isCloseable(): boolean {\n    return false;\n  }\n\n  isTransient(): boolean {\n    return false;\n  }\n\n  toolbarItems(): Promise<ToolbarItem[]> {\n    return Promise.resolve([]);\n  }\n\n  widget(): Promise<Widget> {\n    return (Promise.resolve(this) as Promise<Widget>);\n  }\n\n  revealView(): Promise<void> {\n    return ViewManager.instance().revealView(this);\n  }\n\n  disposeView(): void {\n  }\n}\n\nexport interface ViewLocation {\n  appendApplicableItems(locationName: string): void;\n  appendView(view: View, insertBefore?: View|null): void;\n  showView(view: View, insertBefore?: View|null, userGesture?: boolean): Promise<void>;\n  removeView(view: View): void;\n  widget(): Widget;\n}\n\nexport interface TabbedViewLocation extends ViewLocation {\n  tabbedPane(): TabbedPane;\n  enableMoreTabsButton(): ToolbarMenuButton;\n}\n\nexport interface ViewLocationResolver {\n  resolveLocation(location: string): ViewLocation|null;\n}\n"]}