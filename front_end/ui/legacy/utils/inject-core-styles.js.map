{"version":3,"file":"inject-core-styles.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/legacy/utils/inject-core-styles.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,YAAY,MAAM,mCAAmC,CAAC;AAClE,OAAO,EAAC,WAAW,EAAC,MAAM,mBAAmB,CAAC;AAE9C,MAAM,UAAU,gBAAgB,CAAC,IAAwB;IACvD,oEAAoE;IACpE,WAAW,CAAC,IAAI,EAAE,+BAA+B,CAAC,CAAC;IACnD,WAAW,CAAC,IAAI,EAAE,mCAAmC,CAAC,CAAC;IACvD,WAAW,CAAC,IAAI,EAAE,0BAA0B,CAAC,CAAC;IAC9C,WAAW,CAAC,IAAI,EAAE,2BAA2B,CAAC,CAAC;IAE/C,YAAY,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;IACtE,YAAY,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;AACrE,CAAC;AAED,IAAI,wBAAwB,GAA6B,IAAI,CAAC;AAC9D,MAAM,UAAU,kBAAkB,CAAC,YAAoB;IACrD,IAAI,CAAC,wBAAwB,EAAE;QAC7B;;;;;WAKG;QACH,wBAAwB,GAAG,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KACnE;IAED,MAAM,UAAU,GAAG,wBAAwB,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;IAC3E,IAAI,CAAC,UAAU,EAAE;QACf,MAAM,IAAI,KAAK,CAAC,2CAA2C,YAAY,GAAG,CAAC,CAAC;KAC7E;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,MAAM,UAAU,eAAe;IAC7B,IAAI,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC,6BAA6B,CAAC,EAAE;QAC9E,OAAO,MAAM,CAAC;KACf;IACD,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ThemeSupport from '../theme_support/theme_support.js';\nimport {appendStyle} from './append-style.js';\n\nexport function injectCoreStyles(root: Element|ShadowRoot): void {\n  // TODO: Migrate inspectorCommpon.css last https://crbug.com/1222666\n  appendStyle(root, 'ui/legacy/inspectorCommon.css');\n  appendStyle(root, 'ui/legacy/inspectorScrollbars.css');\n  appendStyle(root, 'ui/legacy/textButton.css');\n  appendStyle(root, 'ui/legacy/themeColors.css');\n\n  ThemeSupport.ThemeSupport.instance().injectHighlightStyleSheets(root);\n  ThemeSupport.ThemeSupport.instance().injectCustomStyleSheets(root);\n}\n\nlet bodyComputedStylesCached: CSSStyleDeclaration|null = null;\nexport function getThemeColorValue(variableName: string): string {\n  if (!bodyComputedStylesCached) {\n    /**\n     * We are safe to cache this value as we're only using this code to look up\n     * theme variables, and they do not change during runtime. And if the user\n     * swaps from light => dark theme, or vice-versa, DevTools is entirely\n     * reloaded, removing this cache.\n     */\n    bodyComputedStylesCached = window.getComputedStyle(document.body);\n  }\n\n  const colorValue = bodyComputedStylesCached.getPropertyValue(variableName);\n  if (!colorValue) {\n    throw new Error(`Could not find theme color for variable ${variableName}.`);\n  }\n  return colorValue;\n}\n\nexport function getCurrentTheme(): 'light'|'dark' {\n  if (document.documentElement.classList.contains('-theme-with-dark-background')) {\n    return 'dark';\n  }\n  return 'light';\n}\n"]}