import * as Common from '../../core/common/common.js';
import type * as TextUtils from '../text_utils/text_utils.js';
import type { IsolatedFileSystemManager } from './IsolatedFileSystemManager.js';
import { PlatformFileSystem } from './PlatformFileSystem.js';
export declare class IsolatedFileSystem extends PlatformFileSystem {
    private readonly manager;
    private readonly embedderPathInternal;
    private readonly domFileSystem;
    private readonly excludedFoldersSetting;
    private excludedFoldersInternal;
    private readonly excludedEmbedderFolders;
    private readonly initialFilePathsInternal;
    private readonly initialGitFoldersInternal;
    private readonly fileLocks;
    constructor(manager: IsolatedFileSystemManager, path: string, embedderPath: string, domFileSystem: FileSystem, type: string);
    static create(manager: IsolatedFileSystemManager, path: string, embedderPath: string, type: string, name: string, rootURL: string): Promise<IsolatedFileSystem | null>;
    static errorMessage(error: DOMError): string;
    private serializedFileOperation;
    getMetadata(path: string): Promise<Metadata | null>;
    initialFilePaths(): string[];
    initialGitFolders(): string[];
    embedderPath(): string;
    private initializeFilePaths;
    private createFoldersIfNotExist;
    private innerCreateFolderIfNeeded;
    createFile(path: string, name: string | null): Promise<string | null>;
    deleteFile(path: string): Promise<boolean>;
    requestFileBlob(path: string): Promise<Blob | null>;
    requestFileContent(path: string): Promise<TextUtils.ContentProvider.DeferredContent>;
    private innerRequestFileContent;
    setFileContent(path: string, content: string, isBase64: boolean): Promise<void>;
    renameFile(path: string, newName: string, callback: (arg0: boolean, arg1?: string | undefined) => void): void;
    private readDirectory;
    private requestEntries;
    private saveExcludedFolders;
    addExcludedFolder(path: string): void;
    removeExcludedFolder(path: string): void;
    fileSystemRemoved(): void;
    isFileExcluded(folderPath: string): boolean;
    excludedFolders(): Set<string>;
    searchInPath(query: string, progress: Common.Progress.Progress): Promise<string[]>;
    indexContent(progress: Common.Progress.Progress): void;
    mimeFromPath(path: string): string;
    canExcludeFolder(path: string): boolean;
    contentType(path: string): Common.ResourceType.ResourceType;
    tooltipForURL(url: string): string;
    supportsAutomapping(): boolean;
}
export declare const BinaryExtensions: Set<string>;
