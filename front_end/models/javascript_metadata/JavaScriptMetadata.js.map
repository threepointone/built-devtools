{"version":3,"file":"JavaScriptMetadata.js","sourceRoot":"","sources":["../../../../../../front_end/models/javascript_metadata/JavaScriptMetadata.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAI7B,OAAO,EAAC,eAAe,EAAC,MAAM,sBAAsB,CAAC;AAErD,IAAI,0BAAkD,CAAC;AAEvD,MAAM,OAAO,sBAAsB;IAChB,eAAe,CAA0B;IACzC,eAAe,CAAuC;IACtD,aAAa,CAAuC;IACrE,MAAM,CAAC,QAAQ,CAAC,OAEZ,EAAC,QAAQ,EAAE,IAAI,EAAC;QAClB,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,0BAA0B,IAAI,QAAQ,EAAE;YAC3C,0BAA0B,GAAG,IAAI,sBAAsB,EAAE,CAAC;SAC3D;QAED,OAAO,0BAA0B,CAAC;IACpC,CAAC;IACD;QACE,IAAI,CAAC,eAAe,GAAG,IAAI,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,eAAe,GAAG,IAAI,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;QAE/B,KAAK,MAAM,cAAc,IAAI,eAAe,EAAE;YAC5C,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE;gBAC5B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;aAC1E;iBAAM,IAAI,cAAc,CAAC,MAAM,EAAE;gBAChC,IAAI,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBACnE,IAAI,CAAC,YAAY,EAAE;oBACjB,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;oBACzB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;iBAC/D;gBACD,YAAY,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;aAClE;iBAAM;gBACL,IAAI,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBACvE,IAAI,CAAC,cAAc,EAAE;oBACnB,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;oBAC3B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;iBACnE;gBACD,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;aACpE;SACF;IACH,CAAC;IAED,2BAA2B,CAAC,IAAY;QACtC,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;IAChD,CAAC;IAED,2BAA2B,CAAC,IAAY,EAAE,iBAAyB;QACjE,MAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACnE,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO,IAAI,CAAC;SACb;QACD,OAAO,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;IAC1C,CAAC;IAED,yBAAyB,CAAC,IAAY,EAAE,uBAA+B;QACrE,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QACrE,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,IAAI,CAAC;SACb;QACD,OAAO,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;IACxC,CAAC;CACF","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\n\nimport {NativeFunctions} from './NativeFunctions.js';\n\nlet javaScriptMetadataInstance: JavaScriptMetadataImpl;\n\nexport class JavaScriptMetadataImpl implements Common.JavaScriptMetaData.JavaScriptMetaData {\n  private readonly uniqueFunctions: Map<string, string[][]>;\n  private readonly instanceMethods: Map<string, Map<string, string[][]>>;\n  private readonly staticMethods: Map<string, Map<string, string[][]>>;\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): JavaScriptMetadataImpl {\n    const {forceNew} = opts;\n    if (!javaScriptMetadataInstance || forceNew) {\n      javaScriptMetadataInstance = new JavaScriptMetadataImpl();\n    }\n\n    return javaScriptMetadataInstance;\n  }\n  constructor() {\n    this.uniqueFunctions = new Map();\n    this.instanceMethods = new Map();\n    this.staticMethods = new Map();\n\n    for (const nativeFunction of NativeFunctions) {\n      if (!nativeFunction.receiver) {\n        this.uniqueFunctions.set(nativeFunction.name, nativeFunction.signatures);\n      } else if (nativeFunction.static) {\n        let staticMethod = this.staticMethods.get(nativeFunction.receiver);\n        if (!staticMethod) {\n          staticMethod = new Map();\n          this.staticMethods.set(nativeFunction.receiver, staticMethod);\n        }\n        staticMethod.set(nativeFunction.name, nativeFunction.signatures);\n      } else {\n        let instanceMethod = this.instanceMethods.get(nativeFunction.receiver);\n        if (!instanceMethod) {\n          instanceMethod = new Map();\n          this.instanceMethods.set(nativeFunction.receiver, instanceMethod);\n        }\n        instanceMethod.set(nativeFunction.name, nativeFunction.signatures);\n      }\n    }\n  }\n\n  signaturesForNativeFunction(name: string): string[][]|null {\n    return this.uniqueFunctions.get(name) || null;\n  }\n\n  signaturesForInstanceMethod(name: string, receiverClassName: string): string[][]|null {\n    const instanceMethod = this.instanceMethods.get(receiverClassName);\n    if (!instanceMethod) {\n      return null;\n    }\n    return instanceMethod.get(name) || null;\n  }\n\n  signaturesForStaticMethod(name: string, receiverConstructorName: string): string[][]|null {\n    const staticMethod = this.staticMethods.get(receiverConstructorName);\n    if (!staticMethod) {\n      return null;\n    }\n    return staticMethod.get(name) || null;\n  }\n}\n"]}