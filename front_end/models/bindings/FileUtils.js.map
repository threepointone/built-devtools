{"version":3,"file":"FileUtils.js","sourceRoot":"","sources":["../../../../../../front_end/models/bindings/FileUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Workspace from '../workspace/workspace.js';\n\n/**\n * @interface\n */\nexport interface ChunkedReader {\n  fileSize(): number;\n\n  loadedSize(): number;\n\n  fileName(): string;\n\n  cancel(): void;\n\n  error(): DOMError|null;\n}\ninterface DecompressionStream extends GenericTransformStream {\n  readonly format: string;\n}\ndeclare const DecompressionStream: {\n  prototype: DecompressionStream,\n  new (format: string): DecompressionStream,\n};\n\nexport class ChunkedFileReader implements ChunkedReader {\n  private file: File|null;\n  private readonly fileSizeInternal: number;\n  private loadedSizeInternal: number;\n  private streamReader: ReadableStreamReader<Uint8Array>|null;\n  private readonly chunkSize: number;\n  private readonly chunkTransferredCallback: ((arg0: ChunkedReader) => void)|undefined;\n  private readonly decoder: TextDecoder;\n  private isCanceled: boolean;\n  private errorInternal: DOMException|null;\n  private transferFinished!: (arg0: boolean) => void;\n  private output?: Common.StringOutputStream.OutputStream;\n  private reader?: FileReader|null;\n\n  constructor(file: File, chunkSize: number, chunkTransferredCallback?: ((arg0: ChunkedReader) => void)) {\n    this.file = file;\n    this.fileSizeInternal = file.size;\n    this.loadedSizeInternal = 0;\n    this.chunkSize = chunkSize;\n    this.chunkTransferredCallback = chunkTransferredCallback;\n    this.decoder = new TextDecoder();\n    this.isCanceled = false;\n    this.errorInternal = null;\n    this.streamReader = null;\n  }\n\n  async read(output: Common.StringOutputStream.OutputStream): Promise<boolean> {\n    if (this.chunkTransferredCallback) {\n      this.chunkTransferredCallback(this);\n    }\n\n    if (this.file?.type.endsWith('gzip')) {\n      const stream = this.decompressStream(this.file.stream());\n      this.streamReader = stream.getReader();\n    } else {\n      this.reader = new FileReader();\n      this.reader.onload = this.onChunkLoaded.bind(this);\n      this.reader.onerror = this.onError.bind(this);\n    }\n\n    this.output = output;\n    this.loadChunk();\n\n    return new Promise(resolve => {\n      this.transferFinished = resolve;\n    });\n  }\n\n  cancel(): void {\n    this.isCanceled = true;\n  }\n\n  loadedSize(): number {\n    return this.loadedSizeInternal;\n  }\n\n  fileSize(): number {\n    return this.fileSizeInternal;\n  }\n\n  fileName(): string {\n    if (!this.file) {\n      return '';\n    }\n    return this.file.name;\n  }\n\n  error(): DOMException|null {\n    return this.errorInternal;\n  }\n\n  // Decompress gzip natively thanks to https://wicg.github.io/compression/\n  private decompressStream(stream: ReadableStream): ReadableStream {\n    const ds = new DecompressionStream('gzip');\n    const decompressionStream = stream.pipeThrough(ds);\n    return decompressionStream;\n  }\n\n  private onChunkLoaded(event: Event): void {\n    if (this.isCanceled) {\n      return;\n    }\n\n    const eventTarget = (event.target as FileReader);\n    if (eventTarget.readyState !== FileReader.DONE) {\n      return;\n    }\n\n    if (!this.reader) {\n      return;\n    }\n\n    const buffer = (this.reader.result as ArrayBuffer);\n    this.loadedSizeInternal += buffer.byteLength;\n    const endOfFile = this.loadedSizeInternal === this.fileSizeInternal;\n    this.decodeChunkBuffer(buffer, endOfFile);\n  }\n\n  private async decodeChunkBuffer(buffer: ArrayBuffer, endOfFile: boolean): Promise<void> {\n    if (!this.output) {\n      return;\n    }\n    const decodedString = this.decoder.decode(buffer, {stream: !endOfFile});\n    await this.output.write(decodedString);\n    if (this.isCanceled) {\n      return;\n    }\n    if (this.chunkTransferredCallback) {\n      this.chunkTransferredCallback(this);\n    }\n\n    if (endOfFile) {\n      this.finishRead();\n      return;\n    }\n    this.loadChunk();\n  }\n\n  private finishRead(): void {\n    if (!this.output) {\n      return;\n    }\n    this.file = null;\n    this.reader = null;\n    this.output.close();\n    this.transferFinished(!this.errorInternal);\n  }\n\n  private async loadChunk(): Promise<void> {\n    if (!this.output || !this.file) {\n      return;\n    }\n    if (this.streamReader) {\n      const {value, done} = await this.streamReader.read();\n      if (done || !value) {\n        return this.finishRead();\n      }\n      this.decodeChunkBuffer(value.buffer, false);\n    }\n    if (this.reader) {\n      const chunkStart = this.loadedSizeInternal;\n      const chunkEnd = Math.min(this.fileSizeInternal, chunkStart + this.chunkSize);\n      const nextPart = this.file.slice(chunkStart, chunkEnd);\n      this.reader.readAsArrayBuffer(nextPart);\n    }\n  }\n\n  private onError(event: Event): void {\n    const eventTarget = (event.target as FileReader);\n    this.errorInternal = eventTarget.error;\n    this.transferFinished(false);\n  }\n}\n\nexport class FileOutputStream implements Common.StringOutputStream.OutputStream {\n  private writeCallbacks: (() => void)[];\n  private fileName!: string;\n  private closed?: boolean;\n  constructor() {\n    this.writeCallbacks = [];\n  }\n\n  async open(fileName: string): Promise<boolean> {\n    this.closed = false;\n    /** @type {!Array<function():void>} */\n    this.writeCallbacks = [];\n    this.fileName = fileName;\n    const saveResponse = await Workspace.FileManager.FileManager.instance().save(this.fileName, '', true);\n    if (saveResponse) {\n      Workspace.FileManager.FileManager.instance().addEventListener(\n          Workspace.FileManager.Events.AppendedToURL, this.onAppendDone, this);\n    }\n    return Boolean(saveResponse);\n  }\n\n  write(data: string): Promise<void> {\n    return new Promise(resolve => {\n      this.writeCallbacks.push(resolve);\n      Workspace.FileManager.FileManager.instance().append(this.fileName, data);\n    });\n  }\n\n  async close(): Promise<void> {\n    this.closed = true;\n    if (this.writeCallbacks.length) {\n      return;\n    }\n    Workspace.FileManager.FileManager.instance().removeEventListener(\n        Workspace.FileManager.Events.AppendedToURL, this.onAppendDone, this);\n    Workspace.FileManager.FileManager.instance().close(this.fileName);\n  }\n\n  private onAppendDone(event: Common.EventTarget.EventTargetEvent<string>): void {\n    if (event.data !== this.fileName) {\n      return;\n    }\n    const writeCallback = this.writeCallbacks.shift();\n    if (writeCallback) {\n      writeCallback();\n    }\n    if (this.writeCallbacks.length) {\n      return;\n    }\n    if (!this.closed) {\n      return;\n    }\n    Workspace.FileManager.FileManager.instance().removeEventListener(\n        Workspace.FileManager.Events.AppendedToURL, this.onAppendDone, this);\n    Workspace.FileManager.FileManager.instance().close(this.fileName);\n  }\n}\n"]}