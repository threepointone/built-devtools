{"version":3,"file":"LanguageExtensionEndpoint.js","sourceRoot":"","sources":["../../../../../../front_end/models/extensions/LanguageExtensionEndpoint.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../bindings/bindings.js';\nimport type {Chrome} from '../../../extension-api/ExtensionAPI.js'; // eslint-disable-line rulesdir/es_modules_import\n\nimport {PrivateAPI} from './ExtensionAPI.js';\n\nexport class LanguageExtensionEndpoint extends Bindings.DebuggerLanguagePlugins.DebuggerLanguagePlugin {\n  private readonly supportedScriptTypes: {\n    language: string,\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    symbol_types: Array<string>,\n  };\n  private readonly port: MessagePort;\n  private nextRequestId: number;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private pendingRequests: Map<any, any>;\n  constructor(\n      name: string, supportedScriptTypes: {\n        language: string,\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        symbol_types: Array<string>,\n      },\n      port: MessagePort) {\n    super(name);\n    this.supportedScriptTypes = supportedScriptTypes;\n    this.port = port;\n    this.port.onmessage = this.onResponse.bind(this);\n    this.nextRequestId = 0;\n    this.pendingRequests = new Map();\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private sendRequest(method: string, parameters: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const requestId = this.nextRequestId++;\n      this.pendingRequests.set(requestId, {resolve, reject});\n      this.port.postMessage({requestId, method, parameters});\n    });\n  }\n\n  private onResponse({data}: MessageEvent<{\n    requestId: number,\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    result: any,\n    error: Error|null,\n  }|{\n    event: string,\n  }>): void {\n    if ('event' in data) {\n      const {event} = data;\n      switch (event) {\n        case PrivateAPI.LanguageExtensionPluginEvents.UnregisteredLanguageExtensionPlugin: {\n          for (const {reject} of this.pendingRequests.values()) {\n            reject(new Error('Language extension endpoint disconnected'));\n          }\n          this.pendingRequests.clear();\n          this.port.close();\n          const {pluginManager} = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance();\n          if (pluginManager) {\n            pluginManager.removePlugin(this);\n          }\n          break;\n        }\n      }\n      return;\n    }\n    const {requestId, result, error} = data;\n    if (!this.pendingRequests.has(requestId)) {\n      console.error(`No pending request ${requestId}`);\n      return;\n    }\n    const {resolve, reject} = this.pendingRequests.get(requestId);\n    this.pendingRequests.delete(requestId);\n    if (error) {\n      reject(new Error(error.message));\n    } else {\n      resolve(result);\n    }\n  }\n\n  handleScript(script: SDK.Script.Script): boolean {\n    const language = script.scriptLanguage();\n    return language !== null && script.debugSymbols !== null && language === this.supportedScriptTypes.language &&\n        this.supportedScriptTypes.symbol_types.includes(script.debugSymbols.type);\n  }\n\n  /** Notify the plugin about a new script\n     */\n  addRawModule(rawModuleId: string, symbolsURL: string, rawModule: Chrome.DevTools.RawModule): Promise<string[]> {\n    return this.sendRequest(\n               PrivateAPI.LanguageExtensionPluginCommands.AddRawModule, {rawModuleId, symbolsURL, rawModule}) as\n        Promise<string[]>;\n  }\n\n  /**\n   * Notifies the plugin that a script is removed.\n   */\n  removeRawModule(rawModuleId: string): Promise<void> {\n    return this.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.RemoveRawModule, {rawModuleId}) as Promise<void>;\n  }\n\n  /** Find locations in raw modules from a location in a source file\n     */\n  sourceLocationToRawLocation(sourceLocation: Chrome.DevTools.SourceLocation):\n      Promise<Chrome.DevTools.RawLocationRange[]> {\n    return this.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.SourceLocationToRawLocation, {sourceLocation}) as\n        Promise<Chrome.DevTools.RawLocationRange[]>;\n  }\n\n  /** Find locations in source files from a location in a raw module\n     */\n  rawLocationToSourceLocation(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.SourceLocation[]> {\n    return this.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.RawLocationToSourceLocation, {rawLocation}) as\n        Promise<Chrome.DevTools.SourceLocation[]>;\n  }\n\n  getScopeInfo(type: string): Promise<Chrome.DevTools.ScopeInfo> {\n    return this.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.GetScopeInfo, {type}) as\n        Promise<Chrome.DevTools.ScopeInfo>;\n  }\n\n  /** List all variables in lexical scope at a given location in a raw module\n     */\n  listVariablesInScope(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.Variable[]> {\n    return this.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.ListVariablesInScope, {rawLocation}) as\n        Promise<Chrome.DevTools.Variable[]>;\n  }\n\n  /** List all function names (including inlined frames) at location\n     */\n  getFunctionInfo(rawLocation: Chrome.DevTools.RawLocation): Promise<{\n    frames: Array<Chrome.DevTools.FunctionInfo>,\n  }> {\n    return this.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.GetFunctionInfo, {rawLocation}) as Promise<{\n             frames: Array<Chrome.DevTools.FunctionInfo>,\n           }>;\n  }\n\n  /** Find locations in raw modules corresponding to the inline function\n     *  that rawLocation is in.\n     */\n  getInlinedFunctionRanges(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.RawLocationRange[]> {\n    return this.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.GetInlinedFunctionRanges, {rawLocation}) as\n        Promise<Chrome.DevTools.RawLocationRange[]>;\n  }\n\n  /** Find locations in raw modules corresponding to inline functions\n     *  called by the function or inline frame that rawLocation is in.\n     */\n  getInlinedCalleesRanges(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.RawLocationRange[]> {\n    return this.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.GetInlinedCalleesRanges, {rawLocation}) as\n        Promise<Chrome.DevTools.RawLocationRange[]>;\n  }\n\n  getTypeInfo(expression: string, context: Chrome.DevTools.RawLocation): Promise<{\n    typeInfos: Array<Chrome.DevTools.TypeInfo>,\n    base: Chrome.DevTools.EvalBase,\n  }|null> {\n    return this.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.GetTypeInfo, {expression, context}) as Promise<{\n             typeInfos: Array<Chrome.DevTools.TypeInfo>,\n             base: Chrome.DevTools.EvalBase,\n           }|null>;\n  }\n\n  getFormatter(\n      expressionOrField: string|{\n        base: Chrome.DevTools.EvalBase,\n        field: Array<Chrome.DevTools.FieldInfo>,\n      },\n      context: Chrome.DevTools.RawLocation): Promise<{\n    js: string,\n  }> {\n    return this.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.GetFormatter, {expressionOrField, context}) as\n        Promise<{\n             js: string,\n           }>;\n  }\n\n  getInspectableAddress(field: {\n    base: Chrome.DevTools.EvalBase,\n    field: Array<Chrome.DevTools.FieldInfo>,\n  }): Promise<{\n    js: string,\n  }> {\n    return this.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.GetInspectableAddress, {field}) as Promise<{\n             js: string,\n           }>;\n  }\n\n  async getMappedLines(rawModuleId: string, sourceFileURL: string): Promise<number[]|undefined> {\n    return this.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.GetMappedLines, {rawModuleId, sourceFileURL});\n  }\n\n  dispose(): void {\n  }\n}\n"]}