{"version":3,"file":"CSSFormatter.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/formatter_worker/CSSFormatter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AAEH,OAAO,KAAK,QAAQ,MAAM,iCAAiC,CAAC;AAG5D,OAAO,EAAC,eAAe,EAAC,MAAM,sBAAsB,CAAC;AAErD,MAAM,UAAU,GAAG,CAAC,UAAkB,EAAU,EAAE;IAChD,kDAAkD;IAClD,MAAM,EAAE,GAAG,wBAAwB,CAAC;IACpC,OAAO,UAAU,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AACpC,CAAC,CAAC;AAEF,MAAM,OAAO,YAAY;IACN,OAAO,CAA0B;IAC1C,QAAQ,CAAU;IAClB,UAAU,CAAU;IACpB,WAAW,CAAY;IACvB,QAAQ,CAAS;IACjB,KAAK,CAKX;IACF,YAAY,OAAgC;QAC1C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG;YACX,aAAa,EAAE,SAAS;YACxB,YAAY,EAAE,SAAS;YACvB,eAAe,EAAE,SAAS;YAC1B,iBAAiB,EAAE,SAAS;SAC7B,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,IAAY,EAAE,WAAqB,EAAE,UAAkB,EAAE,QAAgB;QAC9E,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG;YACX,aAAa,EAAE,SAAS;YACxB,YAAY,EAAE,SAAS;YACvB,eAAe,EAAE,SAAS;YAC1B,iBAAiB,EAAE,SAAS;SAC7B,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;QACnB,MAAM,QAAQ,GAAG,eAAe,CAAC,UAAU,CAAC,CAAC;QAC7C,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;QACnE,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACxF,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAEO,aAAa,CAAC,KAAa,EAAE,IAAiB,EAAE,aAAqB;QAC3E,aAAa,IAAI,IAAI,CAAC,UAAU,CAAC;QACjC,MAAM,SAAS,GACX,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,EAAE,aAAa,EAAE,QAAQ,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;QACpH,IAAI,SAAS,KAAK,IAAI,CAAC,QAAQ,EAAE;YAC/B,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC;SACjC;QACD,4EAA4E;QAC5E,4EAA4E;QAC5E,IAAI,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE;YAC7G,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC;SAChC;QACD,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC1B,kDAAkD;QAClD,MAAM,YAAY,GAAG,wBAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1D,IAAI,YAAY,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;gBAC7B,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;aAC7B;YACD,OAAO;SACR;QACD,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,KAAK,CAAC;QACjC,IAAI,KAAK,KAAK,IAAI,EAAE;YAClB,OAAO;SACR;QAED,IAAI,KAAK,KAAK,GAAG,EAAE;YACjB,IAAI,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE;gBAChC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;aAC/B;YACD,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAG,KAAK,CAAC;SACtC;QACD,IAAI,KAAK,KAAK,GAAG,EAAE;YACjB,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE;gBAC9B,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;aAC3B;YACD,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,CAAC;YACpC,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAG,IAAI,CAAC;YACpC,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC;SACpC;aAAM,IAAI,KAAK,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE;YAClF,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;YAC5C,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC;YAChC,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC;YAClC,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,KAAK,CAAC;YAChC,OAAO;SACR;aAAM,IAAI,KAAK,KAAK,GAAG,EAAE;YACxB,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;YAC5C,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,CAAC;YACpC,OAAO;SACR;QAED,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,aAAa,CAAC,CAAC;QAExD,IAAI,IAAI,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE;YACjF,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;SAC3B;QACD,IAAI,KAAK,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE;YAC/C,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC;YACnC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;SAC3B;aAAM,IAAI,KAAK,KAAK,GAAG,EAAE;YACxB,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;SAC3B;IACH,CAAC;CACF","sourcesContent":["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Platform from '../../core/platform/platform.js';\n\nimport type {FormattedContentBuilder} from './FormattedContentBuilder.js';\nimport {createTokenizer} from './FormatterWorker.js';\n\nconst cssTrimEnd = (tokenValue: string): string => {\n  // https://drafts.csswg.org/css-syntax/#whitespace\n  const re = /(?:\\r?\\n|[\\t\\f\\r ])+$/g;\n  return tokenValue.replace(re, '');\n};\n\nexport class CSSFormatter {\n  private readonly builder: FormattedContentBuilder;\n  private toOffset!: number;\n  private fromOffset!: number;\n  private lineEndings!: number[];\n  private lastLine: number;\n  private state: {\n    eatWhitespace: (boolean|undefined),\n    seenProperty: (boolean|undefined),\n    inPropertyValue: (boolean|undefined),\n    afterClosingBrace: (boolean|undefined),\n  };\n  constructor(builder: FormattedContentBuilder) {\n    this.builder = builder;\n    this.lastLine = -1;\n    this.state = {\n      eatWhitespace: undefined,\n      seenProperty: undefined,\n      inPropertyValue: undefined,\n      afterClosingBrace: undefined,\n    };\n  }\n\n  format(text: string, lineEndings: number[], fromOffset: number, toOffset: number): void {\n    this.lineEndings = lineEndings;\n    this.fromOffset = fromOffset;\n    this.toOffset = toOffset;\n    this.state = {\n      eatWhitespace: undefined,\n      seenProperty: undefined,\n      inPropertyValue: undefined,\n      afterClosingBrace: undefined,\n    };\n    this.lastLine = -1;\n    const tokenize = createTokenizer('text/css');\n    const oldEnforce = this.builder.setEnforceSpaceBetweenWords(false);\n    tokenize(text.substring(this.fromOffset, this.toOffset), this.tokenCallback.bind(this));\n    this.builder.setEnforceSpaceBetweenWords(oldEnforce);\n  }\n\n  private tokenCallback(token: string, type: string|null, startPosition: number): void {\n    startPosition += this.fromOffset;\n    const startLine =\n        Platform.ArrayUtilities.lowerBound(this.lineEndings, startPosition, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n    if (startLine !== this.lastLine) {\n      this.state.eatWhitespace = true;\n    }\n    // The css- prefix is optional, as we override that in the tokenizer defined\n    // in CodeMirrorTextEditor.js. In a worker context, we don't use the prefix.\n    if (type && (/^(css-)?property/.test(type) || /^(css-)?variable-2/.test(type)) && !this.state.inPropertyValue) {\n      this.state.seenProperty = true;\n    }\n    this.lastLine = startLine;\n    // https://drafts.csswg.org/css-syntax/#whitespace\n    const isWhitespace = /^(?:\\r?\\n|[\\t\\f\\r ])+$/.test(token);\n    if (isWhitespace) {\n      if (!this.state.eatWhitespace) {\n        this.builder.addSoftSpace();\n      }\n      return;\n    }\n    this.state.eatWhitespace = false;\n    if (token === '\\n') {\n      return;\n    }\n\n    if (token !== '}') {\n      if (this.state.afterClosingBrace) {\n        this.builder.addNewLine(true);\n      }\n      this.state.afterClosingBrace = false;\n    }\n    if (token === '}') {\n      if (this.state.inPropertyValue) {\n        this.builder.addNewLine();\n      }\n      this.builder.decreaseNestingLevel();\n      this.state.afterClosingBrace = true;\n      this.state.inPropertyValue = false;\n    } else if (token === ':' && !this.state.inPropertyValue && this.state.seenProperty) {\n      this.builder.addToken(token, startPosition);\n      this.builder.addSoftSpace();\n      this.state.eatWhitespace = true;\n      this.state.inPropertyValue = true;\n      this.state.seenProperty = false;\n      return;\n    } else if (token === '{') {\n      this.builder.addSoftSpace();\n      this.builder.addToken(token, startPosition);\n      this.builder.addNewLine();\n      this.builder.increaseNestingLevel();\n      return;\n    }\n\n    this.builder.addToken(cssTrimEnd(token), startPosition);\n\n    if (type === 'comment' && !this.state.inPropertyValue && !this.state.seenProperty) {\n      this.builder.addNewLine();\n    }\n    if (token === ';' && this.state.inPropertyValue) {\n      this.state.inPropertyValue = false;\n      this.builder.addNewLine();\n    } else if (token === '}') {\n      this.builder.addNewLine();\n    }\n  }\n}\n"]}